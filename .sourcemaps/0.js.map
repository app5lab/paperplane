{"version":3,"sources":["../../src/pages/product-details/product-details.module.ts","../../node_modules/ionic-image-loader/dist/providers/image-loader-config.js","../../node_modules/ionic-image-loader/dist/providers/image-loader.js","../../node_modules/ionic-image-loader/dist/components/img-loader.js","../../node_modules/@ionic-native/file/index.js","../../node_modules/@angular/common/esm5/http.js","../../src/pages/product-details/product-details.ts","../../node_modules/ionic-image-loader/dist/index.js","../../node_modules/ionic-image-loader/dist/image-loader.module.js","../../node_modules/rxjs/operator/concatMap.js","../../node_modules/rxjs/operator/filter.js","../../node_modules/rxjs/add/operator/first.js","../../node_modules/rxjs/operator/first.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACO;AACO;AACD;AActD;IAAA;IAAuC,CAAC;IAA3B,wBAAwB;QAZpC,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,4EAAkB;aACnB;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,4EAAkB,CAAC;gBAC5C,4EAAgB,CAAC,OAAO,EAAE;aAC3B;YACD,OAAO,EAAC;gBACN,4EAAkB;aACnB;SACF,CAAC;OACW,wBAAwB,CAAG;IAAD,+BAAC;CAAA;AAAH;;;;;;;;;;;ACjBhB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA,KAAK,kEAAmB;AACxB;AACA;AACA,gDAAgD,WAAW;AAC3D,+C;;;;;;;;;;;;;;;;;;AC3LqB;AACN;AACM;AACO;AACT;AACE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,OAAO;AAC/B,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB,EAAE;AAC9D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,2BAA2B,EAAE;AAC5D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA,uDAAuD,0CAA0C,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAiE,EAAE;AACvG;AACA;AACA,sEAAsE,mCAAmC,EAAE;AAC3G;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB,EAAE;AAC9D,4CAA4C,iBAAiB,EAAE,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+BAA+B;AAC/B,SAAS;AACT;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gGAAgG,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+FAA+F,EAAE;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA,KAAK,kEAAmB;AACxB;AACA;AACA,0CAA0C;AAC1C,KAAK,yFAA2B;AAChC,KAAK,0EAAc;AACnB,KAAK,kFAAoB;AACzB,KAAK,yEAAkB;AACvB,EAAE;AACF,wC;;;;;;;;;;;;AC9hBuE;AACjD;AACM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iCAAiC,EAAE;AAC1E,qCAAqC,sDAAsD,EAAE;AAC7F;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,qFAAqF,EAAE;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA,KAAK;AACL;AACA;AACA;AACA,uCAAuC,aAAa,mBAAmB,oBAAoB,gBAAgB,EAAE;AAC7G,aAAa,IAAI;AACjB;AACA;AACA,wCAAwC;AACxC,KAAK,mEAAoB;AACzB,KAAK,iEAAkB;AACvB,KAAK,sFAAqB;AAC1B,KAAK,mGAA2B;AAChC,EAAE;AACF;AACA,aAAa,6DAAc;AAC3B,qBAAqB,kFAAmC;AACxD,iBAAiB,6DAAc;AAC/B,+BAA+B,6DAAc;AAC7C,gBAAgB,6DAAc;AAC9B,iBAAiB,6DAAc;AAC/B,eAAe,6DAAc;AAC7B,eAAe,6DAAc;AAC7B,gBAAgB,6DAAc;AAC9B,iBAAiB,6DAAc;AAC/B,wBAAwB,6DAAc;AACtC,0BAA0B,6DAAc;AACxC,qBAAqB,6DAAc;AACnC,sBAAsB,6DAAc;AACpC,cAAc,8DAAe;AAC7B;AACA,sC;;;;;;;;;;AC3NA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACqB;AAC8C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,4BAA4B;AAC3C,eAAe,cAAc;AAC7B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,WAAW,EAAE;AAC5C;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,iBAAiB,cAAc;AAC/B;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAA8C;AAC9E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,OAAO;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,eAAe;AAC7C,6BAA6B,OAAO;AACpC,qBAAqB,MAAM;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,eAAe;AAC7C,wBAAwB,OAAO;AAC/B,qBAAqB,MAAM;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,uCAAuC,WAAW;AACliC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACv6BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAC8E;AACjE;AACO;AACH;AACH;AACM;AACkB;AACjB;;AAErB;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA,uCAAuC,EAAE;AACzC,uCAAuC,EAAE;AACzC,uCAAuC,EAAE;AACzC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,kCAAkC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD,sDAAsD,EAAE;AACxD,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,+BAA+B,EAAE,uBAAuB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,+BAA+B,EAAE,4BAA4B,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA,iEAAiE,yCAAyC,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB,EAAE,mDAAmD,EAAE,gCAAgC,EAAE;AACpJ;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,4BAA4B;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,4BAA4B;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,8BAA8B;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,8BAA8B;AAChD;AACA,CAAC;AACD;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sBAAsB,EAAE,OAAO,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE,wBAAwB,EAAE,+BAA+B,YAAY,EAAE;AACxG;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE,qBAAqB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,oBAAoB,sCAAsC,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,oBAAoB,sCAAsC,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B,oBAAoB,sCAAsC,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,8BAA8B,EAAE,iBAAiB,EAAE,mDAAmD,sDAAsD,EAAE;AAC9J,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,sCAAsC,EAAE,MAAM,wBAAwB;AAC/F;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,0CAA0C,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,0CAA0C,EAAE,EAAE,YAAY,EAAE;AACxM;AACA;AACA;AACA;AACA,uCAAuC,EAAE,2CAA2C,EAAE;AACtF,6CAA6C,EAAE,sBAAsB,YAAY,EAAE;AACnF;AACA;AACA;AACA;AACA,2CAA2C,EAAE,wBAAwB,EAAE;AACvE,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,2DAA2D,EAAE;AAC7D;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,sDAAsD,qCAAqC,EAAE,iCAAiC,EAAE;AAChI;AACA;AACA;AACA;AACA;AACA,kDAAkD,qCAAqC,EAAE,iCAAiC,EAAE;AAC5H;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D,2CAA2C,0BAA0B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE,MAAM,6BAA6B;AAC5F;AACA;AACA;AACA,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,2KAAsD,kCAAkC,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,wGAAkD,sCAAsC,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iHAA8D,iBAAiB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,6CAA6C;AAC7C,SAAS,qBAAqB;AAC9B,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,+CAA+C;AAChE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,qDAAqD;AACrD,SAAS,8BAA8B;AACvC,SAAS,gCAAgC,0IAAkC,IAAI;AAC/E,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,mDAAmD;AACnD,SAAS,4BAA4B;AACrC,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,mBAAmB,EAAE,6BAA6B;AACnE;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,6CAA6C,WAAW;AACxD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,yDAAyD,qDAAqD,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,yDAAyD,qEAAqE;AAC9H;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE,MAAM,2BAA2B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,iDAAiD;AACjD,SAAS,oBAAoB;AAC7B,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,0DAA0D;AAC1D,SAAS,gCAAgC,0IAAkC,IAAI;AAC/E,SAAS,gCAAgC,mIAAqC,IAAI;AAClF,SAAS,gCAAgC,yFAA0C,IAAI;AACvF,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,sDAAsD;AACtD,SAAS,gCAAgC;AACzC,SAAS,gCAAgC,yFAA0C,IAAI;AACvF,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,gFAAgF,sDAAsD,EAAE;AACxI;AACA;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,0DAA0D;AAC1D,SAAS,qBAAqB;AAC9B,SAAS,iEAAkB;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA,kEAAkE,sDAAsD,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAA0D;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA,sCAAsC,0DAA0D;AAChG,sCAAsC,0DAA0D;AAChG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,4EAA4E;AACrG,yBAAyB,qEAAqE;AAC9F,yBAAyB,oDAAoD;AAC7E,yBAAyB,sDAAsD;AAC/E;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,uDAAuD,WAAW;AAClE;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB,0DAA0D;AACnF;AACA,yBAAyB,oDAAoD;AAC7E;AACA,yBAAyB,+CAA+C;AACxE;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,mDAAmD,WAAW;AAC9D;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,kEAAkE;AAC3F,yBAAyB,sEAAsE;AAC/F;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,wDAAwD,WAAW;AACnE;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;ACzrFqD;AACY;AAKjE;IAUE,4BACS,OAAsB,EACtB,SAAoB;QADpB,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QALtB,YAAO,GAAU,EAAE,CAAC;QACpB,YAAO,GAAU,EAAE,CAAC;QAOzB,IAAI,CAAC,OAAO,GAAG;YACb,IAAI,EAAC,UAAU;YACf,MAAM,EAAE,CAAC,0BAA0B,EAAE,oBAAoB,EAAC,oBAAoB,CAAC;YAC/E,UAAU,EAAE,CAAC,OAAO,EAAC,KAAK,EAAC,MAAM,CAAC;YAClC,KAAK,EAAE,GAAG;SACX;QAED,IAAI,CAAC,OAAO,GAAG,CAAC;gBACd,aAAa,EAAE,YAAY;gBAC3B,MAAM,EAAE,+JAA+J;aAGxK,CAAC;QAEF,IAAI,CAAC,OAAO,GAAE,CAAC;gBACf,KAAK,EAAC,iBAAiB;gBACvB,KAAK,EAAC,0DAA0D;aAC/D,CAAC;IACJ,CAAC;IAED,gBAAgB;IAChB,4CAAe,GAAf;QAEE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IAE1B,CAAC;IAxCoB;QAApB,gEAAS,CAAE,6DAAM,CAAE;kCAAS,6DAAM;sDAAC;IAHzB,kBAAkB;QAF9B,gEAAS,CAAE,EAAE,QAAQ,EAAE,sBAAsB,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAE;yCAanE,oEAAa;YACX,gEAAS;OAZlB,kBAAkB,CA4C9B;IAAD,yBAAC;CAAA;AA5C8B;;;;;;;;;;;;;;;;;ACN/B;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;;;;ACJmB;AACC;AACE;AACM;AACN;AACP;AACY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,+CAA+C,WAAW;AAC1D,+C;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,oDAAoD;AAC/D;AACA;AACA,WAAW,oFAAoF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;AC9CA;AACA;AACA;AACA;AACA,iC;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,WAAW;AACvB;AACA;AACA,WAAW,kEAAkE;AAC7E;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ProductDetailsPage } from './product-details';\r\nimport { IonicImageLoader } from 'ionic-image-loader';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProductDetailsPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(ProductDetailsPage),\r\n    IonicImageLoader.forRoot()\r\n  ],\r\n  exports:[\r\n    ProductDetailsPage\r\n  ]\r\n})\r\nexport class ProductDetailsPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/product-details/product-details.module.ts","import { Injectable } from '@angular/core';\r\nvar ImageLoaderConfig = (function () {\r\n    function ImageLoaderConfig() {\r\n        this.debugMode = false;\r\n        this.spinnerEnabled = true;\r\n        this.fallbackAsPlaceholder = false;\r\n        this.backgroundSize = 'contain';\r\n        this.backgroundRepeat = 'no-repeat';\r\n        this.display = 'block';\r\n        this.width = '100%';\r\n        this.height = '100%';\r\n        this.useImg = false;\r\n        this.concurrency = 5;\r\n        this.maxCacheSize = -1;\r\n        this.maxCacheAge = -1;\r\n        this.imageReturnType = 'uri';\r\n        this.fileNameCachedWithExtension = false;\r\n        this.fallbackFileNameCachedExtension = '.jpg';\r\n        this._cacheDirectoryName = 'image-loader-cache';\r\n    }\r\n    Object.defineProperty(ImageLoaderConfig.prototype, \"cacheDirectoryName\", {\r\n        get: function () {\r\n            return this._cacheDirectoryName;\r\n        },\r\n        set: function (name) {\r\n            name.replace(/\\W/g, '');\r\n            this._cacheDirectoryName = name;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Enables debug mode to receive console logs, errors, warnings\r\n     */\r\n    ImageLoaderConfig.prototype.enableDebugMode = function () {\r\n        this.debugMode = true;\r\n    };\r\n    /**\r\n     * Enable/Disable the spinner by default. Defaults to true.\r\n     * @param enable {boolean} set to true to enable\r\n     */\r\n    ImageLoaderConfig.prototype.enableSpinner = function (enable) {\r\n        this.spinnerEnabled = enable;\r\n    };\r\n    /**\r\n     * Enable/Disable the fallback image as placeholder instead of the spinner. Defaults to false.\r\n     * @param enable {boolean} set to true to enable\r\n     */\r\n    ImageLoaderConfig.prototype.enableFallbackAsPlaceholder = function (enable) {\r\n        this.fallbackAsPlaceholder = enable;\r\n    };\r\n    /**\r\n     * Sets the cache directory name. Defaults to 'image-loader-cache'\r\n     * @param name {string} name of directory\r\n     */\r\n    ImageLoaderConfig.prototype.setCacheDirectoryName = function (name) {\r\n        this.cacheDirectoryName = name;\r\n    };\r\n    /**\r\n     * Set default height for images that are not using <img> tag\r\n     * @param height {string} height\r\n     */\r\n    ImageLoaderConfig.prototype.setHeight = function (height) {\r\n        this.height = height;\r\n    };\r\n    /**\r\n     * Set default width for images that are not using <img> tag\r\n     * @param width {string} Width\r\n     */\r\n    ImageLoaderConfig.prototype.setWidth = function (width) {\r\n        this.width = width;\r\n    };\r\n    /**\r\n     * Enable display mode for images that are not using <img> tag\r\n     * @param display {string} Display mode\r\n     */\r\n    ImageLoaderConfig.prototype.setDisplay = function (display) {\r\n        this.display = display;\r\n    };\r\n    /**\r\n     * Use <img> tag by default\r\n     * @param use {boolean} set to true to use <img> tag by default\r\n     */\r\n    ImageLoaderConfig.prototype.useImageTag = function (use) {\r\n        this.useImg = use;\r\n    };\r\n    /**\r\n     * Set default background size for images that are not using <img> tag\r\n     * @param backgroundSize {string} Background size\r\n     */\r\n    ImageLoaderConfig.prototype.setBackgroundSize = function (backgroundSize) {\r\n        this.backgroundSize = backgroundSize;\r\n    };\r\n    /**\r\n     * Set background repeat for images that are not using <img> tag\r\n     * @param backgroundRepeat {string} Background repeat\r\n     */\r\n    ImageLoaderConfig.prototype.setBackgroundRepeat = function (backgroundRepeat) {\r\n        this.backgroundRepeat = backgroundRepeat;\r\n    };\r\n    /**\r\n     * Set fallback URL to use when image src is undefined or did not resolve.\r\n     * This image will not be cached. This should ideally be a locally saved image.\r\n     * @param fallbackUrl {string} The remote or local URL of the image\r\n     */\r\n    ImageLoaderConfig.prototype.setFallbackUrl = function (fallbackUrl) {\r\n        this.fallbackUrl = fallbackUrl;\r\n    };\r\n    /**\r\n     * Set the maximum number of allowed connections at the same time.\r\n     * @param concurrency\r\n     */\r\n    ImageLoaderConfig.prototype.setConcurrency = function (concurrency) {\r\n        this.concurrency = concurrency;\r\n    };\r\n    /**\r\n     * Sets the maximum allowed cache size\r\n     * @param cacheSize {number} Cache size in bytes\r\n     */\r\n    ImageLoaderConfig.prototype.setMaximumCacheSize = function (cacheSize) {\r\n        this.maxCacheSize = cacheSize;\r\n    };\r\n    /**\r\n     * Sets the maximum allowed cache age\r\n     * @param cacheAge {number} Maximum cache age in milliseconds\r\n     */\r\n    ImageLoaderConfig.prototype.setMaximumCacheAge = function (cacheAge) {\r\n        this.maxCacheAge = cacheAge;\r\n    };\r\n    /**\r\n     * Set the return type of cached images\r\n     * @param imageReturnType {string} The return type; either 'base64' or 'uri'\r\n     */\r\n    ImageLoaderConfig.prototype.setImageReturnType = function (imageReturnType) {\r\n        this.imageReturnType = imageReturnType;\r\n    };\r\n    /**\r\n     * Set the default spinnern ame\r\n     * @param name\r\n     */\r\n    ImageLoaderConfig.prototype.setSpinnerName = function (name) {\r\n        this.spinnerName = name;\r\n    };\r\n    /**\r\n     * Set the default spinner color\r\n     * @param color\r\n     */\r\n    ImageLoaderConfig.prototype.setSpinnerColor = function (color) {\r\n        this.spinnerColor = color;\r\n    };\r\n    /**\r\n     * Set headers options for the HttpClient transfers.\r\n     * @param headers\r\n     */\r\n    ImageLoaderConfig.prototype.setHttpHeaders = function (headers) {\r\n        this.httpHeaders = headers;\r\n    };\r\n    /**\r\n     * Set options for the FileTransfer plugin\r\n     * @param options\r\n     * @deprecated FileTransfer plugin removed.\r\n     */\r\n    ImageLoaderConfig.prototype.setFileTransferOptions = function (options) {\r\n        // do nothing, plugin deprecated.\r\n    };\r\n    /**\r\n     * Enable/Disable the save filename of cached images with extension.  Defaults to false.\r\n     * @param enable {boolean} set to true to enable\r\n     */\r\n    ImageLoaderConfig.prototype.setFileNameCachedWithExtension = function (enable) {\r\n        this.fileNameCachedWithExtension = enable;\r\n    };\r\n    /**\r\n     * Set fallback extension filename of cached images.  Defaults to '.jpg'.\r\n     * @param extension {string} fallback extension (e.x .jpg)\r\n     */\r\n    ImageLoaderConfig.prototype.setFallbackFileNameCachedExtension = function (extension) {\r\n        this.fallbackFileNameCachedExtension = extension;\r\n    };\r\n    return ImageLoaderConfig;\r\n}());\r\nexport { ImageLoaderConfig };\r\nImageLoaderConfig.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nImageLoaderConfig.ctorParameters = function () { return []; };\r\n//# sourceMappingURL=image-loader-config.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ionic-image-loader/dist/providers/image-loader-config.js\n// module id = 420\n// module chunks = 0","import { Injectable } from '@angular/core';\r\nimport { File } from '@ionic-native/file';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ImageLoaderConfig } from \"./image-loader-config\";\r\nimport { Platform } from 'ionic-angular';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/first';\r\nvar ImageLoader = (function () {\r\n    function ImageLoader(config, file, http, platform) {\r\n        var _this = this;\r\n        this.config = config;\r\n        this.file = file;\r\n        this.http = http;\r\n        this.platform = platform;\r\n        /**\r\n         * Indicates if the cache service is ready.\r\n         * When the cache service isn't ready, images are loaded via browser instead.\r\n         * @type {boolean}\r\n         */\r\n        this.isCacheReady = false;\r\n        /**\r\n         * Indicates if this service is initialized.\r\n         * This service is initialized once all the setup is done.\r\n         * @type {boolean}\r\n         */\r\n        this.isInit = false;\r\n        /**\r\n         * Number of concurrent requests allowed\r\n         * @type {number}\r\n         */\r\n        this.concurrency = 5;\r\n        /**\r\n         * Queue items\r\n         * @type {Array}\r\n         */\r\n        this.queue = [];\r\n        this.processing = 0;\r\n        this.cacheIndex = [];\r\n        this.currentCacheSize = 0;\r\n        this.indexed = false;\r\n        if (!platform.is('cordova')) {\r\n            // we are running on a browser, or using livereload\r\n            // plugin will not function in this case\r\n            this.isInit = true;\r\n            this.throwWarning('You are running on a browser or using livereload, IonicImageLoader will not function, falling back to browser loading.');\r\n        }\r\n        else {\r\n            Observable.fromEvent(document, 'deviceready').first().subscribe(function (res) {\r\n                if (_this.nativeAvailable) {\r\n                    _this.initCache();\r\n                }\r\n                else {\r\n                    // we are running on a browser, or using livereload\r\n                    // plugin will not function in this case\r\n                    _this.isInit = true;\r\n                    _this.throwWarning('You are running on a browser or using livereload, IonicImageLoader will not function, falling back to browser loading.');\r\n                }\r\n            });\r\n        }\r\n    }\r\n    Object.defineProperty(ImageLoader.prototype, \"nativeAvailable\", {\r\n        get: function () {\r\n            return File.installed();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ImageLoader.prototype, \"shouldIndex\", {\r\n        get: function () {\r\n            return (this.config.maxCacheAge > -1) || (this.config.maxCacheSize > -1);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ImageLoader.prototype, \"isWKWebView\", {\r\n        get: function () {\r\n            return this.platform.is('ios') && window.webkit && window.webkit.messageHandlers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ImageLoader.prototype, \"isIonicWKWebView\", {\r\n        get: function () {\r\n            return this.isWKWebView && (location.host === 'localhost:8080' || window.LiveReload);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Preload an image\r\n     * @param imageUrl {string} Image URL\r\n     * @returns {Promise<string>} returns a promise that resolves with the cached image URL\r\n     */\r\n    ImageLoader.prototype.preload = function (imageUrl) {\r\n        return this.getImagePath(imageUrl);\r\n    };\r\n    /**\r\n     * Clears the cache\r\n     */\r\n    ImageLoader.prototype.clearCache = function () {\r\n        var _this = this;\r\n        if (!this.platform.is('cordova'))\r\n            return;\r\n        var clear = function () {\r\n            if (!_this.isInit) {\r\n                // do not run this method until our service is initialized\r\n                setTimeout(clear.bind(_this), 500);\r\n                return;\r\n            }\r\n            // pause any operations\r\n            _this.isInit = false;\r\n            _this.file.removeRecursively(_this.file.cacheDirectory, _this.config.cacheDirectoryName)\r\n                .then(function () {\r\n                if (_this.isWKWebView && !_this.isIonicWKWebView) {\r\n                    // also clear the temp files\r\n                    _this.file.removeRecursively(_this.file.tempDirectory, _this.config.cacheDirectoryName)\r\n                        .catch(function (error) {\r\n                        // Noop catch. Removing the tempDirectory might fail,\r\n                        // as it is not persistent.\r\n                    })\r\n                        .then(function () {\r\n                        _this.initCache(true);\r\n                    });\r\n                }\r\n                else {\r\n                    _this.initCache(true);\r\n                }\r\n            })\r\n                .catch(_this.throwError.bind(_this));\r\n        };\r\n        clear();\r\n    };\r\n    /**\r\n     * Gets the filesystem path of an image.\r\n     * This will return the remote path if anything goes wrong or if the cache service isn't ready yet.\r\n     * @param imageUrl {string} The remote URL of the image\r\n     * @returns {Promise<string>} Returns a promise that will always resolve with an image URL\r\n     */\r\n    ImageLoader.prototype.getImagePath = function (imageUrl) {\r\n        var _this = this;\r\n        if (typeof imageUrl !== 'string' || imageUrl.length <= 0) {\r\n            return Promise.reject('The image url provided was empty or invalid.');\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            var getImage = function () {\r\n                _this.getCachedImagePath(imageUrl)\r\n                    .then(resolve)\r\n                    .catch(function () {\r\n                    // image doesn't exist in cache, lets fetch it and save it\r\n                    _this.addItemToQueue(imageUrl, resolve, reject);\r\n                });\r\n            };\r\n            var check = function () {\r\n                if (_this.isInit) {\r\n                    if (_this.isCacheReady) {\r\n                        getImage();\r\n                    }\r\n                    else {\r\n                        _this.throwWarning('The cache system is not running. Images will be loaded by your browser instead.');\r\n                        resolve(imageUrl);\r\n                    }\r\n                }\r\n                else {\r\n                    setTimeout(function () { return check(); }, 250);\r\n                }\r\n            };\r\n            check();\r\n        });\r\n    };\r\n    /**\r\n     * Add an item to the queue\r\n     * @param imageUrl\r\n     * @param resolve\r\n     * @param reject\r\n     */\r\n    ImageLoader.prototype.addItemToQueue = function (imageUrl, resolve, reject) {\r\n        this.queue.push({\r\n            imageUrl: imageUrl,\r\n            resolve: resolve,\r\n            reject: reject\r\n        });\r\n        this.processQueue();\r\n    };\r\n    Object.defineProperty(ImageLoader.prototype, \"canProcess\", {\r\n        /**\r\n         * Check if we can process more items in the queue\r\n         * @returns {boolean}\r\n         */\r\n        get: function () {\r\n            return (this.queue.length > 0\r\n                && this.processing < this.concurrency);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes one item from the queue\r\n     */\r\n    ImageLoader.prototype.processQueue = function () {\r\n        var _this = this;\r\n        // make sure we can process items first\r\n        if (!this.canProcess)\r\n            return;\r\n        // increase the processing number\r\n        this.processing++;\r\n        // take the first item from queue\r\n        var currentItem = this.queue.splice(0, 1)[0];\r\n        // process more items concurrently if we can\r\n        if (this.canProcess)\r\n            this.processQueue();\r\n        // function to call when done processing this item\r\n        // this will reduce the processing number\r\n        // then will execute this function again to process any remaining items\r\n        var done = function () {\r\n            _this.processing--;\r\n            _this.processQueue();\r\n        };\r\n        var localDir = this.file.cacheDirectory + this.config.cacheDirectoryName + '/';\r\n        var fileName = this.createFileName(currentItem.imageUrl);\r\n        this.http.get(currentItem.imageUrl, {\r\n            responseType: 'blob',\r\n            headers: this.config.httpHeaders,\r\n        }).subscribe(function (data) {\r\n            _this.file.writeFile(localDir, fileName, data).then(function (file) {\r\n                if (_this.shouldIndex) {\r\n                    _this.addFileToIndex(file).then(_this.maintainCacheSize.bind(_this));\r\n                }\r\n                return _this.getCachedImagePath(currentItem.imageUrl);\r\n            }).then(function (localUrl) {\r\n                currentItem.resolve(localUrl);\r\n                done();\r\n            }).catch(function (e) {\r\n                currentItem.reject();\r\n                _this.throwError(e);\r\n                done();\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Initialize the cache service\r\n     * @param replace {boolean} Whether to replace the cache directory if it already exists\r\n     */\r\n    ImageLoader.prototype.initCache = function (replace) {\r\n        var _this = this;\r\n        this.concurrency = this.config.concurrency;\r\n        // create cache directories if they do not exist\r\n        this.createCacheDirectory(replace)\r\n            .catch(function (e) {\r\n            _this.throwError(e);\r\n            _this.isInit = true;\r\n        })\r\n            .then(function () { return _this.indexCache(); })\r\n            .then(function () {\r\n            _this.isCacheReady = true;\r\n            _this.isInit = true;\r\n        });\r\n    };\r\n    /**\r\n     * Adds a file to index.\r\n     * Also deletes any files if they are older than the set maximum cache age.\r\n     * @param file {FileEntry} File to index\r\n     * @returns {Promise<any>}\r\n     */\r\n    ImageLoader.prototype.addFileToIndex = function (file) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) { return file.getMetadata(resolve, reject); })\r\n            .then(function (metadata) {\r\n            if (_this.config.maxCacheAge > -1\r\n                && (Date.now() - metadata.modificationTime.getTime()) > _this.config.maxCacheAge) {\r\n                // file age exceeds maximum cache age\r\n                return _this.removeFile(file.name);\r\n            }\r\n            else {\r\n                // file age doesn't exceed maximum cache age, or maximum cache age isn't set\r\n                _this.currentCacheSize += metadata.size;\r\n                // add item to index\r\n                _this.cacheIndex.push({\r\n                    name: file.name,\r\n                    modificationTime: metadata.modificationTime,\r\n                    size: metadata.size\r\n                });\r\n                return Promise.resolve();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Indexes the cache if necessary\r\n     * @returns {any}\r\n     */\r\n    ImageLoader.prototype.indexCache = function () {\r\n        var _this = this;\r\n        // only index if needed, to save resources\r\n        if (!this.shouldIndex)\r\n            return Promise.resolve();\r\n        this.cacheIndex = [];\r\n        return this.file.listDir(this.file.cacheDirectory, this.config.cacheDirectoryName)\r\n            .then(function (files) { return Promise.all(files.map(_this.addFileToIndex.bind(_this))); })\r\n            .then(function () {\r\n            // Sort items by date. Most recent to oldest.\r\n            _this.cacheIndex = _this.cacheIndex.sort(function (a, b) { return a > b ? -1 : a < b ? 1 : 0; });\r\n            _this.indexed = true;\r\n            return Promise.resolve();\r\n        })\r\n            .catch(function (e) {\r\n            _this.throwError(e);\r\n            return Promise.resolve();\r\n        });\r\n    };\r\n    /**\r\n     * This method runs every time a new file is added.\r\n     * It checks the cache size and ensures that it doesn't exceed the maximum cache size set in the config.\r\n     * If the limit is reached, it will delete old images to create free space.\r\n     */\r\n    ImageLoader.prototype.maintainCacheSize = function () {\r\n        var _this = this;\r\n        if (this.config.maxCacheSize > -1 && this.indexed) {\r\n            var maintain_1 = function () {\r\n                if (_this.currentCacheSize > _this.config.maxCacheSize) {\r\n                    // called when item is done processing\r\n                    var next_1 = function () {\r\n                        _this.currentCacheSize -= file_1.size;\r\n                        maintain_1();\r\n                    };\r\n                    // grab the first item in index since it's the oldest one\r\n                    var file_1 = _this.cacheIndex.splice(0, 1)[0];\r\n                    if (typeof file_1 == 'undefined')\r\n                        return maintain_1();\r\n                    // delete the file then process next file if necessary\r\n                    _this.removeFile(file_1.name)\r\n                        .then(function () { return next_1(); })\r\n                        .catch(function () { return next_1(); }); // ignore errors, nothing we can do about it\r\n                }\r\n            };\r\n            maintain_1();\r\n        }\r\n    };\r\n    /**\r\n     * Remove a file\r\n     * @param file {string} The name of the file to remove\r\n     */\r\n    ImageLoader.prototype.removeFile = function (file) {\r\n        var _this = this;\r\n        return this.file\r\n            .removeFile(this.file.cacheDirectory + this.config.cacheDirectoryName, file)\r\n            .then(function () {\r\n            if (_this.isWKWebView && !_this.isIonicWKWebView) {\r\n                return _this.file\r\n                    .removeFile(_this.file.tempDirectory + _this.config.cacheDirectoryName, file)\r\n                    .catch(function () {\r\n                    // Noop catch. Removing the files from tempDirectory might fail, as it is not persistent.\r\n                });\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Get the local path of a previously cached image if exists\r\n     * @param url {string} The remote URL of the image\r\n     * @returns {Promise<string>} Returns a promise that resolves with the local path if exists, or rejects if doesn't exist\r\n     */\r\n    ImageLoader.prototype.getCachedImagePath = function (url) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            // make sure cache is ready\r\n            if (!_this.isCacheReady) {\r\n                return reject();\r\n            }\r\n            // get file name\r\n            var fileName = _this.createFileName(url);\r\n            // get full path\r\n            var dirPath = _this.file.cacheDirectory + _this.config.cacheDirectoryName, tempDirPath = _this.file.tempDirectory + _this.config.cacheDirectoryName;\r\n            // check if exists\r\n            _this.file.resolveLocalFilesystemUrl(dirPath + '/' + fileName)\r\n                .then(function (fileEntry) {\r\n                // file exists in cache\r\n                if (_this.config.imageReturnType === 'base64') {\r\n                    // read the file as data url and return the base64 string.\r\n                    // should always be successful as the existence of the file\r\n                    // is alreay ensured\r\n                    _this.file\r\n                        .readAsDataURL(dirPath, fileName)\r\n                        .then(function (base64) {\r\n                        base64 = base64.replace('data:null', 'data:*/*');\r\n                        resolve(base64);\r\n                    })\r\n                        .catch(reject);\r\n                }\r\n                else if (_this.config.imageReturnType === 'uri') {\r\n                    // now check if iOS device & using WKWebView Engine.\r\n                    // in this case only the tempDirectory is accessible,\r\n                    // therefore the file needs to be copied into that directory first!\r\n                    if (_this.isIonicWKWebView) {\r\n                        // Ionic WKWebView can access all files, but we just need to replace file:/// with http://localhost:8080/\r\n                        resolve(fileEntry.nativeURL.replace('file:///', 'http://localhost:8080/'));\r\n                    }\r\n                    else if (_this.isWKWebView) {\r\n                        // check if file already exists in temp directory\r\n                        _this.file.resolveLocalFilesystemUrl(tempDirPath + '/' + fileName)\r\n                            .then(function (tempFileEntry) {\r\n                            // file exists in temp directory\r\n                            // return native path\r\n                            resolve(tempFileEntry.nativeURL);\r\n                        })\r\n                            .catch(function () {\r\n                            // file does not yet exist in the temp directory.\r\n                            // copy it!\r\n                            _this.file.copyFile(dirPath, fileName, tempDirPath, fileName)\r\n                                .then(function (tempFileEntry) {\r\n                                // now the file exists in the temp directory\r\n                                // return native path\r\n                                resolve(tempFileEntry.nativeURL);\r\n                            })\r\n                                .catch(reject);\r\n                        });\r\n                    }\r\n                    else {\r\n                        // return native path\r\n                        resolve(fileEntry.nativeURL);\r\n                    }\r\n                }\r\n            })\r\n                .catch(reject); // file doesn't exist\r\n        });\r\n    };\r\n    /**\r\n     * Throws a console error if debug mode is enabled\r\n     * @param args {any[]} Error message\r\n     */\r\n    ImageLoader.prototype.throwError = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this.config.debugMode) {\r\n            args.unshift('ImageLoader Error: ');\r\n            console.error.apply(console, args);\r\n        }\r\n    };\r\n    /**\r\n     * Throws a console warning if debug mode is enabled\r\n     * @param args {any[]} Error message\r\n     */\r\n    ImageLoader.prototype.throwWarning = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this.config.debugMode) {\r\n            args.unshift('ImageLoader Warning: ');\r\n            console.warn.apply(console, args);\r\n        }\r\n    };\r\n    /**\r\n     * Check if the cache directory exists\r\n     * @param directory {string} The directory to check. Either this.file.tempDirectory or this.file.cacheDirectory\r\n     * @returns {Promise<boolean|FileError>} Returns a promise that resolves if exists, and rejects if it doesn't\r\n     */\r\n    ImageLoader.prototype.cacheDirectoryExists = function (directory) {\r\n        return this.file.checkDir(directory, this.config.cacheDirectoryName);\r\n    };\r\n    /**\r\n     * Create the cache directories\r\n     * @param replace {boolean} override directory if exists\r\n     * @returns {Promise<DirectoryEntry|FileError>} Returns a promise that resolves if the directories were created, and rejects on error\r\n     */\r\n    ImageLoader.prototype.createCacheDirectory = function (replace) {\r\n        var _this = this;\r\n        if (replace === void 0) { replace = false; }\r\n        var cacheDirectoryPromise, tempDirectoryPromise;\r\n        if (replace) {\r\n            // create or replace the cache directory\r\n            cacheDirectoryPromise = this.file.createDir(this.file.cacheDirectory, this.config.cacheDirectoryName, replace);\r\n        }\r\n        else {\r\n            // check if the cache directory exists.\r\n            // if it does not exist create it!\r\n            cacheDirectoryPromise = this.cacheDirectoryExists(this.file.cacheDirectory)\r\n                .catch(function () { return _this.file.createDir(_this.file.cacheDirectory, _this.config.cacheDirectoryName, false); });\r\n        }\r\n        if (this.isWKWebView && !this.isIonicWKWebView) {\r\n            if (replace) {\r\n                // create or replace the temp directory\r\n                tempDirectoryPromise = this.file.createDir(this.file.tempDirectory, this.config.cacheDirectoryName, replace);\r\n            }\r\n            else {\r\n                // check if the temp directory exists.\r\n                // if it does not exist create it!\r\n                tempDirectoryPromise = this.cacheDirectoryExists(this.file.tempDirectory)\r\n                    .catch(function () { return _this.file.createDir(_this.file.tempDirectory, _this.config.cacheDirectoryName, false); });\r\n            }\r\n        }\r\n        else {\r\n            tempDirectoryPromise = Promise.resolve();\r\n        }\r\n        return Promise.all([cacheDirectoryPromise, tempDirectoryPromise]);\r\n    };\r\n    /**\r\n     * Creates a unique file name out of the URL\r\n     * @param url {string} URL of the file\r\n     * @returns {string} Unique file name\r\n     */\r\n    ImageLoader.prototype.createFileName = function (url) {\r\n        // hash the url to get a unique file name\r\n        return this.hashString(url).toString() + (this.config.fileNameCachedWithExtension ? this.getExtensionFromFileName(url) : '');\r\n    };\r\n    /**\r\n     * Converts a string to a unique 32-bit int\r\n     * @param string {string} string to hash\r\n     * @returns {number} 32-bit int\r\n     */\r\n    ImageLoader.prototype.hashString = function (string) {\r\n        var hash = 0, char;\r\n        if (string.length === 0)\r\n            return hash;\r\n        for (var i = 0; i < string.length; i++) {\r\n            char = string.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash;\r\n        }\r\n        return hash;\r\n    };\r\n    /**\r\n     * extract extension from filename or url\r\n     *\r\n     * @param filename\r\n     * @returns {string}\r\n     */\r\n    ImageLoader.prototype.getExtensionFromFileName = function (filename) {\r\n        return filename.substr((~-filename.lastIndexOf(\".\") >>> 0) + 1) || this.config.fallbackFileNameCachedExtension;\r\n    };\r\n    return ImageLoader;\r\n}());\r\nexport { ImageLoader };\r\nImageLoader.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nImageLoader.ctorParameters = function () { return [\r\n    { type: ImageLoaderConfig, },\r\n    { type: File, },\r\n    { type: HttpClient, },\r\n    { type: Platform, },\r\n]; };\r\n//# sourceMappingURL=image-loader.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ionic-image-loader/dist/providers/image-loader.js\n// module id = 421\n// module chunks = 0","import { Component, Input, Output, ElementRef, Renderer, EventEmitter } from '@angular/core';\r\nimport { ImageLoader } from '../providers/image-loader';\r\nimport { ImageLoaderConfig } from '../providers/image-loader-config';\r\nvar propMap = {\r\n    display: 'display',\r\n    height: 'height',\r\n    width: 'width',\r\n    backgroundSize: 'background-size',\r\n    backgroundRepeat: 'background-repeat'\r\n};\r\nvar ImgLoader = (function () {\r\n    function ImgLoader(_element, _renderer, _imageLoader, _config) {\r\n        this._element = _element;\r\n        this._renderer = _renderer;\r\n        this._imageLoader = _imageLoader;\r\n        this._config = _config;\r\n        /**\r\n         * Fallback URL to load when the image url fails to load or does not exist.\r\n         */\r\n        this.fallbackUrl = this._config.fallbackUrl;\r\n        /**\r\n         * Whether to show a spinner while the image loads\r\n         */\r\n        this.spinner = this._config.spinnerEnabled;\r\n        /**\r\n         * Whether to show the fallback image instead of a spinner while the image loads\r\n         */\r\n        this.fallbackAsPlaceholder = this._config.fallbackAsPlaceholder;\r\n        this._useImg = this._config.useImg;\r\n        /**\r\n         * Enable/Disable caching\r\n         * @type {boolean}\r\n         */\r\n        this.cache = true;\r\n        /**\r\n         * Width of the image. This will be ignored if using useImg.\r\n         */\r\n        this.width = this._config.width;\r\n        /**\r\n         * Height of the image. This will be ignored if using useImg.\r\n         */\r\n        this.height = this._config.height;\r\n        /**\r\n         * Display type of the image. This will be ignored if using useImg.\r\n         */\r\n        this.display = this._config.display;\r\n        /**\r\n         * Background size. This will be ignored if using useImg.\r\n         */\r\n        this.backgroundSize = this._config.backgroundSize;\r\n        /**\r\n         * Background repeat. This will be ignored if using useImg.\r\n         */\r\n        this.backgroundRepeat = this._config.backgroundRepeat;\r\n        /**\r\n         * Name of the spinner\r\n         */\r\n        this.spinnerName = this._config.spinnerName;\r\n        /**\r\n         * Color of the spinner\r\n         */\r\n        this.spinnerColor = this._config.spinnerColor;\r\n        /**\r\n         * Notify on image load..\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Indicates if the image is still loading\r\n         * @type {boolean}\r\n         */\r\n        this.isLoading = true;\r\n    }\r\n    Object.defineProperty(ImgLoader.prototype, \"src\", {\r\n        get: function () {\r\n            return this._src;\r\n        },\r\n        /**\r\n         * The URL of the image to load.\r\n         */\r\n        set: function (imageUrl) {\r\n            this._src = this.processImageUrl(imageUrl);\r\n            this.updateImage(this._src);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    Object.defineProperty(ImgLoader.prototype, \"useImg\", {\r\n        /**\r\n         * Use <img> tag\r\n         */\r\n        set: function (val) {\r\n            this._useImg = val !== false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ImgLoader.prototype, \"noCache\", {\r\n        /**\r\n         * Convenience attribute to disable caching\r\n         * @param val\r\n         */\r\n        set: function (val) {\r\n            this.cache = val !== false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ImgLoader.prototype.ngOnInit = function () {\r\n        if (this.fallbackAsPlaceholder && this.fallbackUrl) {\r\n            this.setImage(this.fallbackUrl, false);\r\n        }\r\n        if (!this.src) {\r\n            // image url was not passed\r\n            // this can happen when [src] is set to a variable that turned out to be undefined\r\n            // one example could be a list of users with their profile pictures\r\n            // in this case, it would be useful to use the fallback image instead\r\n            // if fallbackUrl was used as placeholder we do not need to set it again\r\n            if (!this.fallbackAsPlaceholder && this.fallbackUrl) {\r\n                // we're not going to cache the fallback image since it should be locally saved\r\n                this.setImage(this.fallbackUrl);\r\n            }\r\n            else {\r\n                this.isLoading = false;\r\n            }\r\n        }\r\n    };\r\n    ImgLoader.prototype.updateImage = function (imageUrl) {\r\n        var _this = this;\r\n        this._imageLoader.getImagePath(imageUrl)\r\n            .then(function (imageUrl) { return _this.setImage(imageUrl); })\r\n            .catch(function (error) { return _this.setImage(_this.fallbackUrl || imageUrl); });\r\n    };\r\n    /**\r\n     * Gets the image URL to be loaded and disables caching if necessary\r\n     * @returns {string}\r\n     */\r\n    ImgLoader.prototype.processImageUrl = function (imageUrl) {\r\n        if (this.cache === false) {\r\n            // need to disable caching\r\n            if (imageUrl.indexOf('?') === -1) {\r\n                imageUrl += '?';\r\n            }\r\n            if (['&', '?'].indexOf(imageUrl.charAt(imageUrl.length)) === -1) {\r\n                imageUrl += '&';\r\n            }\r\n            // append timestamp at the end to make URL unique\r\n            imageUrl += 'cache_buster=' + Date.now();\r\n        }\r\n        return imageUrl;\r\n    };\r\n    /**\r\n     * Set the image to be displayed\r\n     * @param imageUrl {string} image src\r\n     * @param stopLoading {boolean} set to true to mark the image as loaded\r\n     */\r\n    ImgLoader.prototype.setImage = function (imageUrl, stopLoading) {\r\n        var _this = this;\r\n        if (stopLoading === void 0) { stopLoading = true; }\r\n        this.isLoading = !stopLoading;\r\n        if (this._useImg) {\r\n            // Using <img> tag\r\n            if (!this.element) {\r\n                // create img element if we dont have one\r\n                this.element = this._renderer.createElement(this._element.nativeElement, 'img');\r\n            }\r\n            // set it's src\r\n            this._renderer.setElementAttribute(this.element, 'src', imageUrl);\r\n            if (this.fallbackUrl && !this._imageLoader.nativeAvailable) {\r\n                this._renderer.listen(this.element, 'error', function () { return _this._renderer.setElementAttribute(_this.element, 'src', _this.fallbackUrl); });\r\n            }\r\n        }\r\n        else {\r\n            // Not using <img> tag\r\n            this.element = this._element.nativeElement;\r\n            for (var prop in propMap) {\r\n                if (this[prop]) {\r\n                    this._renderer.setElementStyle(this.element, propMap[prop], this[prop]);\r\n                }\r\n            }\r\n            this._renderer.setElementStyle(this.element, 'background-image', 'url(\\'' + (imageUrl || this.fallbackUrl) + '\\')');\r\n        }\r\n        this.load.emit(this);\r\n    };\r\n    return ImgLoader;\r\n}());\r\nexport { ImgLoader };\r\nImgLoader.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'img-loader',\r\n                template: '<ion-spinner *ngIf=\"spinner && isLoading && !fallbackAsPlaceholder\" [name]=\"spinnerName\" [color]=\"spinnerColor\"></ion-spinner>' +\r\n                    '<ng-content></ng-content>',\r\n                styles: ['ion-spinner { float: none; margin-left: auto; margin-right: auto; display: block; }']\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nImgLoader.ctorParameters = function () { return [\r\n    { type: ElementRef, },\r\n    { type: Renderer, },\r\n    { type: ImageLoader, },\r\n    { type: ImageLoaderConfig, },\r\n]; };\r\nImgLoader.propDecorators = {\r\n    'src': [{ type: Input },],\r\n    'fallbackUrl': [{ type: Input, args: ['fallback',] },],\r\n    'spinner': [{ type: Input },],\r\n    'fallbackAsPlaceholder': [{ type: Input },],\r\n    'useImg': [{ type: Input },],\r\n    'noCache': [{ type: Input },],\r\n    'cache': [{ type: Input },],\r\n    'width': [{ type: Input },],\r\n    'height': [{ type: Input },],\r\n    'display': [{ type: Input },],\r\n    'backgroundSize': [{ type: Input },],\r\n    'backgroundRepeat': [{ type: Input },],\r\n    'spinnerName': [{ type: Input },],\r\n    'spinnerColor': [{ type: Input },],\r\n    'load': [{ type: Output },],\r\n};\r\n//# sourceMappingURL=img-loader.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ionic-image-loader/dist/components/img-loader.js\n// module id = 422\n// module chunks = 0","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { CordovaCheck, CordovaProperty, IonicNativePlugin, Plugin } from '@ionic-native/core';\r\n/**\r\n * @name File\r\n * @description\r\n * This plugin implements a File API allowing read/write access to files residing on the device.\r\n *\r\n * The File class implements static convenience functions to access files and directories.\r\n *\r\n * Example:\r\n * ```\r\n * import { File } from '@ionic-native/file';\r\n *\r\n * constructor(private file: File) { }\r\n *\r\n * ...\r\n *\r\n * this.file.checkDir(this.file.dataDirectory, 'mydir').then(_ => console.log('Directory exists')).catch(err => console.log('Directory doesn't exist'));\r\n *\r\n * ```\r\n *\r\n *  This plugin is based on several specs, including : The HTML5 File API http: //www.w3.org/TR/FileAPI/\r\n *  The (now-defunct) Directories and System extensions Latest: http: //www.w3.org/TR/2012/WD-file-system-api-20120417/\r\n *  Although most of the plugin code was written when an earlier spec was current: http: //www.w3.org/TR/2011/WD-file-system-api-20110419/\r\n *  It also implements the FileWriter spec : http: //dev.w3.org/2009/dap/file-system/file-writer.html\r\n *  @interfaces\r\n *  IFile\r\n *  Entry\r\n *  DirectoryEntry\r\n *  DirectoryReader\r\n *  FileSystem\r\n */\r\nvar File = (function (_super) {\r\n    __extends(File, _super);\r\n    function File() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.cordovaFileError = {\r\n            1: 'NOT_FOUND_ERR',\r\n            2: 'SECURITY_ERR',\r\n            3: 'ABORT_ERR',\r\n            4: 'NOT_READABLE_ERR',\r\n            5: 'ENCODING_ERR',\r\n            6: 'NO_MODIFICATION_ALLOWED_ERR',\r\n            7: 'INVALID_STATE_ERR',\r\n            8: 'SYNTAX_ERR',\r\n            9: 'INVALID_MODIFICATION_ERR',\r\n            10: 'QUOTA_EXCEEDED_ERR',\r\n            11: 'TYPE_MISMATCH_ERR',\r\n            12: 'PATH_EXISTS_ERR',\r\n            13: 'WRONG_ENTRY_TYPE',\r\n            14: 'DIR_READ_ERR'\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get free disk space in Bytes\r\n     * @returns {Promise<number>} Returns a promise that resolves with the remaining free disk space in Bytes\r\n     */\r\n    File.prototype.getFreeDiskSpace = function () {\r\n        return new Promise(function (resolve, reject) {\r\n            cordova.exec(resolve, reject, 'File', 'getFreeDiskSpace', []);\r\n        });\r\n    };\r\n    /**\r\n     * Check if a directory exists in a certain path, directory.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} dir Name of directory to check\r\n     * @returns {Promise<boolean>} Returns a Promise that resolves to true if the directory exists or rejects with an error.\r\n     */\r\n    File.prototype.checkDir = function (path, dir) {\r\n        if (/^\\//.test(dir)) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        var fullPath = path + dir;\r\n        return this.resolveDirectoryUrl(fullPath).then(function () {\r\n            return true;\r\n        });\r\n    };\r\n    /**\r\n     * Creates a new directory in the specific path.\r\n     * The replace boolean value determines whether to replace an existing directory with the same name.\r\n     * If an existing directory exists and the replace value is false, the promise will fail and return an error.\r\n     *\r\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} dirName Name of directory to create\r\n     * @param {boolean} replace If true, replaces file with same name. If false returns error\r\n     * @returns {Promise<DirectoryEntry>} Returns a Promise that resolves with a DirectoryEntry or rejects with an error.\r\n     */\r\n    File.prototype.createDir = function (path, dirName, replace) {\r\n        var _this = this;\r\n        if (/^\\//.test(dirName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        var options = {\r\n            create: true\r\n        };\r\n        if (!replace) {\r\n            options.exclusive = true;\r\n        }\r\n        return this.resolveDirectoryUrl(path).then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, options);\r\n        });\r\n    };\r\n    /**\r\n     * Remove a directory at a given path.\r\n     *\r\n     * @param {string} path The path to the directory\r\n     * @param {string} dirName The directory name\r\n     * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\r\n     */\r\n    File.prototype.removeDir = function (path, dirName) {\r\n        var _this = this;\r\n        if (/^\\//.test(dirName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (de) {\r\n            return _this.remove(de);\r\n        });\r\n    };\r\n    /**\r\n     * Move a directory to a given path.\r\n     *\r\n     * @param {string} path The source path to the directory\r\n     * @param {string} dirName The source directory name\r\n     * @param {string} newPath The destination path to the directory\r\n     * @param {string} newDirName The destination directory name\r\n     * @returns {Promise<DirectoryEntry|Entry>} Returns a Promise that resolves to the new DirectoryEntry object or rejects with an error.\r\n     */\r\n    File.prototype.moveDir = function (path, dirName, newPath, newDirName) {\r\n        var _this = this;\r\n        newDirName = newDirName || dirName;\r\n        if (/^\\//.test(newDirName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (srcde) {\r\n            return _this.resolveDirectoryUrl(newPath).then(function (destenation) {\r\n                return _this.move(srcde, destenation, newDirName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Copy a directory in various methods. If destination directory exists, will fail to copy.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} dirName Name of directory to copy\r\n     * @param {string} newPath Base FileSystem of new location\r\n     * @param {string} newDirName New name of directory to copy to (leave blank to remain the same)\r\n     * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry object or rejects with an error.\r\n     */\r\n    File.prototype.copyDir = function (path, dirName, newPath, newDirName) {\r\n        var _this = this;\r\n        if (/^\\//.test(newDirName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (srcde) {\r\n            return _this.resolveDirectoryUrl(newPath).then(function (deste) {\r\n                return _this.copy(srcde, deste, newDirName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * List files and directory from a given path.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} dirName Name of directory\r\n     * @returns {Promise<Entry[]>} Returns a Promise that resolves to an array of Entry objects or rejects with an error.\r\n     */\r\n    File.prototype.listDir = function (path, dirName) {\r\n        var _this = this;\r\n        if (/^\\//.test(dirName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, {\r\n                create: false,\r\n                exclusive: false\r\n            });\r\n        })\r\n            .then(function (de) {\r\n            var reader = de.createReader();\r\n            return _this.readEntries(reader);\r\n        });\r\n    };\r\n    /**\r\n     * Removes all files and the directory from a desired location.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} dirName Name of directory\r\n     * @returns {Promise<RemoveResult>} Returns a Promise that resolves with a RemoveResult or rejects with an error.\r\n     */\r\n    File.prototype.removeRecursively = function (path, dirName) {\r\n        var _this = this;\r\n        if (/^\\//.test(dirName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (de) {\r\n            return _this.rimraf(de);\r\n        });\r\n    };\r\n    /**\r\n     * Check if a file exists in a certain path, directory.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} file Name of file to check\r\n     * @returns {Promise<boolean>} Returns a Promise that resolves with a boolean or rejects with an error.\r\n     */\r\n    File.prototype.checkFile = function (path, file) {\r\n        if (/^\\//.test(file)) {\r\n            var err = new FileError(5);\r\n            err.message = 'file cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveLocalFilesystemUrl(path + file).then(function (fse) {\r\n            if (fse.isFile) {\r\n                return true;\r\n            }\r\n            else {\r\n                var err = new FileError(13);\r\n                err.message = 'input is not a file';\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Creates a new file in the specific path.\r\n     * The replace boolean value determines whether to replace an existing file with the same name.\r\n     * If an existing file exists and the replace value is false, the promise will fail and return an error.\r\n     *\r\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} fileName Name of file to create\r\n     * @param {boolean} replace If true, replaces file with same name. If false returns error\r\n     * @returns {Promise<FileEntry>} Returns a Promise that resolves to a FileEntry or rejects with an error.\r\n     */\r\n    File.prototype.createFile = function (path, fileName, replace) {\r\n        var _this = this;\r\n        if (/^\\//.test(fileName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        var options = {\r\n            create: true\r\n        };\r\n        if (!replace) {\r\n            options.exclusive = true;\r\n        }\r\n        return this.resolveDirectoryUrl(path).then(function (fse) {\r\n            return _this.getFile(fse, fileName, options);\r\n        });\r\n    };\r\n    /**\r\n     * Removes a file from a desired location.\r\n     *\r\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} fileName Name of file to remove\r\n     * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\r\n     */\r\n    File.prototype.removeFile = function (path, fileName) {\r\n        var _this = this;\r\n        if (/^\\//.test(fileName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getFile(fse, fileName, { create: false });\r\n        })\r\n            .then(function (fe) {\r\n            return _this.remove(fe);\r\n        });\r\n    };\r\n    /** Write a new file to the desired location.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} fileName path relative to base path\r\n     * @param {string | Blob | ArrayBuffer} text content, blob or ArrayBuffer to write\r\n     * @param {IWriteOptions} options replace file if set to true. See WriteOptions for more information.\r\n     * @returns {Promise<any>} Returns a Promise that resolves to updated file entry or rejects with an error.\r\n     */\r\n    File.prototype.writeFile = function (path, fileName, text, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (/^\\//.test(fileName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        var getFileOpts = {\r\n            create: !options.append,\r\n            exclusive: !options.replace\r\n        };\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (directoryEntry) {\r\n            return _this.getFile(directoryEntry, fileName, getFileOpts);\r\n        })\r\n            .then(function (fileEntry) {\r\n            return _this.writeFileEntry(fileEntry, text, options);\r\n        });\r\n    };\r\n    /** Write content to FileEntry.\r\n     *\r\n     * @hidden\r\n     * @param {FileEntry} fe file entry object\r\n     * @param {string | Blob} text content or blob to write\r\n     * @param {IWriteOptions} options replace file if set to true. See WriteOptions for more information.\r\n     * @returns {Promise<FileEntry>} Returns a Promise that resolves to updated file entry or rejects with an error.\r\n     */\r\n    File.prototype.writeFileEntry = function (fe, text, options) {\r\n        var _this = this;\r\n        return this.createWriter(fe)\r\n            .then(function (writer) {\r\n            if (options.append) {\r\n                writer.seek(writer.length);\r\n            }\r\n            if (options.truncate) {\r\n                writer.truncate(options.truncate);\r\n            }\r\n            return _this.write(writer, text);\r\n        })\r\n            .then(function () { return fe; });\r\n    };\r\n    /** Write to an existing file.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} fileName path relative to base path\r\n     * @param {string | Blob} text content or blob to write\r\n     * @returns {Promise<void>} Returns a Promise that resolves or rejects with an error.\r\n     */\r\n    File.prototype.writeExistingFile = function (path, fileName, text) {\r\n        return this.writeFile(path, fileName, text, { replace: true });\r\n    };\r\n    /**\r\n     * Read the contents of a file as text.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string or rejects with an error.\r\n     */\r\n    File.prototype.readAsText = function (path, file) {\r\n        return this.readFile(path, file, 'Text');\r\n    };\r\n    /**\r\n     * Read file and return data as a base64 encoded data url.\r\n     * A data url is of the form:\r\n     *      data: [<mediatype>][;base64],<data>\r\n  \r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as data URL or rejects with an error.\r\n     */\r\n    File.prototype.readAsDataURL = function (path, file) {\r\n        return this.readFile(path, file, 'DataURL');\r\n    };\r\n    /**\r\n     * Read file and return data as a binary data.\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string rejects with an error.\r\n     */\r\n    File.prototype.readAsBinaryString = function (path, file) {\r\n        return this.readFile(path, file, 'BinaryString');\r\n    };\r\n    /**\r\n     * Read file and return data as an ArrayBuffer.\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<ArrayBuffer>} Returns a Promise that resolves with the contents of the file as ArrayBuffer or rejects with an error.\r\n     */\r\n    File.prototype.readAsArrayBuffer = function (path, file) {\r\n        return this.readFile(path, file, 'ArrayBuffer');\r\n    };\r\n    File.prototype.readFile = function (path, file, readAs) {\r\n        var _this = this;\r\n        if (/^\\//.test(file)) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (directoryEntry) {\r\n            return _this.getFile(directoryEntry, file, { create: false });\r\n        })\r\n            .then(function (fileEntry) {\r\n            var reader = new FileReader();\r\n            return new Promise(function (resolve, reject) {\r\n                reader.onloadend = function () {\r\n                    if (reader.result !== undefined || reader.result !== null) {\r\n                        resolve(reader.result);\r\n                    }\r\n                    else if (reader.error !== undefined || reader.error !== null) {\r\n                        reject(reader.error);\r\n                    }\r\n                    else {\r\n                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });\r\n                    }\r\n                };\r\n                fileEntry.file(function (file) {\r\n                    reader[\"readAs\" + readAs].call(reader, file);\r\n                }, function (error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Move a file to a given path.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} fileName Name of file to move\r\n     * @param {string} newPath Base FileSystem of new location\r\n     * @param {string} newFileName New name of file to move to (leave blank to remain the same)\r\n     * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry or rejects with an error.\r\n     */\r\n    File.prototype.moveFile = function (path, fileName, newPath, newFileName) {\r\n        var _this = this;\r\n        newFileName = newFileName || fileName;\r\n        if (/^\\//.test(newFileName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'file name cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getFile(fse, fileName, { create: false });\r\n        })\r\n            .then(function (srcfe) {\r\n            return _this.resolveDirectoryUrl(newPath).then(function (deste) {\r\n                return _this.move(srcfe, deste, newFileName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Copy a file in various methods. If file exists, will fail to copy.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystem above\r\n     * @param {string} fileName Name of file to copy\r\n     * @param {string} newPath Base FileSystem of new location\r\n     * @param {string} newFileName New name of file to copy to (leave blank to remain the same)\r\n     * @returns {Promise<Entry>} Returns a Promise that resolves to an Entry or rejects with an error.\r\n     */\r\n    File.prototype.copyFile = function (path, fileName, newPath, newFileName) {\r\n        var _this = this;\r\n        newFileName = newFileName || fileName;\r\n        if (/^\\//.test(newFileName)) {\r\n            var err = new FileError(5);\r\n            err.message = 'file name cannot start with /';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getFile(fse, fileName, { create: false });\r\n        })\r\n            .then(function (srcfe) {\r\n            return _this.resolveDirectoryUrl(newPath).then(function (deste) {\r\n                return _this.copy(srcfe, deste, newFileName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.fillErrorMessage = function (err) {\r\n        try {\r\n            err.message = this.cordovaFileError[err.code];\r\n        }\r\n        catch (e) { }\r\n    };\r\n    /**\r\n     * Resolves a local file system URL\r\n     * @param fileUrl {string} file system url\r\n     * @returns {Promise<Entry>}\r\n     */\r\n    File.prototype.resolveLocalFilesystemUrl = function (fileUrl) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                window.resolveLocalFileSystemURL(fileUrl, function (entry) {\r\n                    resolve(entry);\r\n                }, function (err) {\r\n                    _this.fillErrorMessage(err);\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (xc) {\r\n                _this.fillErrorMessage(xc);\r\n                reject(xc);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Resolves a local directory url\r\n     * @param directoryUrl {string} directory system url\r\n     * @returns {Promise<DirectoryEntry>}\r\n     */\r\n    File.prototype.resolveDirectoryUrl = function (directoryUrl) {\r\n        return this.resolveLocalFilesystemUrl(directoryUrl).then(function (de) {\r\n            if (de.isDirectory) {\r\n                return de;\r\n            }\r\n            else {\r\n                var err = new FileError(13);\r\n                err.message = 'input is not a directory';\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Get a directory\r\n     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\r\n     * @param directoryName {string} Directory name\r\n     * @param flags {Flags} Options\r\n     * @returns {Promise<DirectoryEntry>}\r\n     */\r\n    File.prototype.getDirectory = function (directoryEntry, directoryName, flags) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                directoryEntry.getDirectory(directoryName, flags, function (de) {\r\n                    resolve(de);\r\n                }, function (err) {\r\n                    _this.fillErrorMessage(err);\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (xc) {\r\n                _this.fillErrorMessage(xc);\r\n                reject(xc);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Get a file\r\n     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\r\n     * @param fileName {string} File name\r\n     * @param flags {Flags} Options\r\n     * @returns {Promise<FileEntry>}\r\n     */\r\n    File.prototype.getFile = function (directoryEntry, fileName, flags) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                directoryEntry.getFile(fileName, flags, resolve, function (err) {\r\n                    _this.fillErrorMessage(err);\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (xc) {\r\n                _this.fillErrorMessage(xc);\r\n                reject(xc);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.remove = function (fe) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            fe.remove(function () {\r\n                resolve({ success: true, fileRemoved: fe });\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.move = function (srce, destdir, newName) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            srce.moveTo(destdir, newName, function (deste) {\r\n                resolve(deste);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.copy = function (srce, destdir, newName) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            srce.copyTo(destdir, newName, function (deste) {\r\n                resolve(deste);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.readEntries = function (dr) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            dr.readEntries(function (entries) {\r\n                resolve(entries);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.rimraf = function (de) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            de.removeRecursively(function () {\r\n                resolve({ success: true, fileRemoved: de });\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.createWriter = function (fe) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            fe.createWriter(function (writer) {\r\n                resolve(writer);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.write = function (writer, gu) {\r\n        if (gu instanceof Blob) {\r\n            return this.writeFileInChunks(writer, gu);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            writer.onwriteend = function (evt) {\r\n                if (writer.error) {\r\n                    reject(writer.error);\r\n                }\r\n                else {\r\n                    resolve(evt);\r\n                }\r\n            };\r\n            writer.write(gu);\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.writeFileInChunks = function (writer, file) {\r\n        var BLOCK_SIZE = 1024 * 1024;\r\n        var writtenSize = 0;\r\n        function writeNextChunk() {\r\n            var size = Math.min(BLOCK_SIZE, file.size - writtenSize);\r\n            var chunk = file.slice(writtenSize, writtenSize + size);\r\n            writtenSize += size;\r\n            writer.write(chunk);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            writer.onerror = reject;\r\n            writer.onwrite = function () {\r\n                if (writtenSize < file.size) {\r\n                    writeNextChunk();\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            };\r\n            writeNextChunk();\r\n        });\r\n    };\r\n    File.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    File.ctorParameters = function () { return []; };\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"applicationDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"applicationStorageDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"dataDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"cacheDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"externalApplicationStorageDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"externalDataDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"externalCacheDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"externalRootDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"tempDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"syncedDataDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"documentsDirectory\", void 0);\r\n    __decorate([\r\n        CordovaProperty,\r\n        __metadata(\"design:type\", String)\r\n    ], File.prototype, \"sharedDirectory\", void 0);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", []),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"getFreeDiskSpace\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"checkDir\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, Boolean]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"createDir\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"removeDir\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"moveDir\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"copyDir\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"listDir\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"removeRecursively\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"checkFile\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, Boolean]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"createFile\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"removeFile\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, Object, Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"writeFile\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"writeExistingFile\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"readAsText\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"readAsDataURL\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"readAsBinaryString\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"readAsArrayBuffer\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"moveFile\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"copyFile\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"resolveLocalFilesystemUrl\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [String]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"resolveDirectoryUrl\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object, String, Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"getDirectory\", null);\r\n    __decorate([\r\n        CordovaCheck(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object, String, Object]),\r\n        __metadata(\"design:returntype\", Promise)\r\n    ], File.prototype, \"getFile\", null);\r\n    File = __decorate([\r\n        Plugin({\r\n            pluginName: 'File',\r\n            plugin: 'cordova-plugin-file',\r\n            pluginRef: 'cordova.file',\r\n            repo: 'https://github.com/apache/cordova-plugin-file',\r\n            platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows']\r\n        })\r\n    ], File);\r\n    return File;\r\n}(IonicNativePlugin));\r\nexport { File };\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic-native/file/index.js\n// module id = 423\n// module chunks = 0","/**\r\n * @license Angular v5.2.9\r\n * (c) 2010-2018 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { Inject, Injectable, InjectionToken, Injector, NgModule, PLATFORM_ID } from '@angular/core';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { concatMap } from 'rxjs/operator/concatMap';\r\nimport { filter } from 'rxjs/operator/filter';\r\nimport { map } from 'rxjs/operator/map';\r\nimport { __extends } from 'tslib';\r\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar HttpHandler = /** @class */ (function () {\r\n    function HttpHandler() {\r\n    }\r\n    return HttpHandler;\r\n}());\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar HttpBackend = /** @class */ (function () {\r\n    function HttpBackend() {\r\n    }\r\n    return HttpBackend;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n/**\r\n * Immutable set of Http headers, with lazy parsing.\r\n * \\@stable\r\n */\r\nvar HttpHeaders = /** @class */ (function () {\r\n    function HttpHeaders(headers) {\r\n        var _this = this;\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = function () {\r\n                _this.headers = new Map();\r\n                headers.split('\\n').forEach(function (line) {\r\n                    var /** @type {?} */ index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        var /** @type {?} */ name_1 = line.slice(0, index);\r\n                        var /** @type {?} */ key = name_1.toLowerCase();\r\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\r\n                        _this.maybeSetNormalizedName(name_1, key);\r\n                        if (_this.headers.has(key)) {\r\n                            /** @type {?} */ ((_this.headers.get(key))).push(value);\r\n                        }\r\n                        else {\r\n                            _this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = function () {\r\n                _this.headers = new Map();\r\n                Object.keys(headers).forEach(function (name) {\r\n                    var /** @type {?} */ values = headers[name];\r\n                    var /** @type {?} */ key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        _this.headers.set(key, values);\r\n                        _this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of header by given name.\r\n     */\r\n    /**\r\n     * Checks for existence of header by given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.has = /**\r\n     * Checks for existence of header by given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    };\r\n    /**\r\n     * Returns first header that matches given name.\r\n     */\r\n    /**\r\n     * Returns first header that matches given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.get = /**\r\n     * Returns first header that matches given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        this.init();\r\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    };\r\n    /**\r\n     * Returns the names of the headers\r\n     */\r\n    /**\r\n     * Returns the names of the headers\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.keys = /**\r\n     * Returns the names of the headers\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    };\r\n    /**\r\n     * Returns list of header values for a given name.\r\n     */\r\n    /**\r\n     * Returns list of header values for a given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.getAll = /**\r\n     * Returns list of header values for a given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    };\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.append = /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (name, value) {\r\n        return this.clone({ name: name, value: value, op: 'a' });\r\n    };\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.set = /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (name, value) {\r\n        return this.clone({ name: name, value: value, op: 's' });\r\n    };\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.delete = /**\r\n     * @param {?} name\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    function (name, value) {\r\n        return this.clone({ name: name, value: value, op: 'd' });\r\n    };\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} lcName\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.maybeSetNormalizedName = /**\r\n     * @param {?} name\r\n     * @param {?} lcName\r\n     * @return {?}\r\n     */\r\n    function (name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.init = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.copyFrom = /**\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    function (other) {\r\n        var _this = this;\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(function (key) {\r\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\r\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\r\n        });\r\n    };\r\n    /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.clone = /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    function (update) {\r\n        var /** @type {?} */ clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    };\r\n    /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.applyUpdate = /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    function (update) {\r\n        var /** @type {?} */ key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                var /** @type {?} */ value = /** @type {?} */ ((update.value));\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push.apply(base, value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);\r\n                if (!toDelete_1) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    var /** @type {?} */ existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    HttpHeaders.prototype.forEach = /**\r\n     * \\@internal\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var _this = this;\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\r\n    };\r\n    return HttpHeaders;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A codec for encoding and decoding parameters in URLs.\r\n *\r\n * Used by `HttpParams`.\r\n *\r\n * \\@stable\r\n *\r\n * @record\r\n */\r\n\r\n/**\r\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\r\n * serialize and parse URL parameter keys and values.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpUrlEncodingCodec = /** @class */ (function () {\r\n    function HttpUrlEncodingCodec() {\r\n    }\r\n    /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    HttpUrlEncodingCodec.prototype.encodeKey = /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    function (k) { return standardEncoding(k); };\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    HttpUrlEncodingCodec.prototype.encodeValue = /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    function (v) { return standardEncoding(v); };\r\n    /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    HttpUrlEncodingCodec.prototype.decodeKey = /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    function (k) { return decodeURIComponent(k); };\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    HttpUrlEncodingCodec.prototype.decodeValue = /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    function (v) { return decodeURIComponent(v); };\r\n    return HttpUrlEncodingCodec;\r\n}());\r\n/**\r\n * @param {?} rawParams\r\n * @param {?} codec\r\n * @return {?}\r\n */\r\nfunction paramParser(rawParams, codec) {\r\n    var /** @type {?} */ map$$1 = new Map();\r\n    if (rawParams.length > 0) {\r\n        var /** @type {?} */ params = rawParams.split('&');\r\n        params.forEach(function (param) {\r\n            var /** @type {?} */ eqIdx = param.indexOf('=');\r\n            var _a = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\r\n            var /** @type {?} */ list = map$$1.get(key) || [];\r\n            list.push(val);\r\n            map$$1.set(key, list);\r\n        });\r\n    }\r\n    return map$$1;\r\n}\r\n/**\r\n * @param {?} v\r\n * @return {?}\r\n */\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\n/**\r\n * Options used to construct an `HttpParams` instance.\r\n * @record\r\n */\r\n\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable - all mutation operations return a new instance.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpParams = /** @class */ (function () {\r\n    function HttpParams(options) {\r\n        if (options === void 0) { options = /** @type {?} */ ({}); }\r\n        var _this = this;\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(function (key) {\r\n                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\r\n                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Check whether the body has one or more values for the given parameter name.\r\n     */\r\n    /**\r\n     * Check whether the body has one or more values for the given parameter name.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.has = /**\r\n     * Check whether the body has one or more values for the given parameter name.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    function (param) {\r\n        this.init();\r\n        return /** @type {?} */ ((this.map)).has(param);\r\n    };\r\n    /**\r\n     * Get the first value for the given parameter name, or `null` if it's not present.\r\n     */\r\n    /**\r\n     * Get the first value for the given parameter name, or `null` if it's not present.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.get = /**\r\n     * Get the first value for the given parameter name, or `null` if it's not present.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    function (param) {\r\n        this.init();\r\n        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\r\n        return !!res ? res[0] : null;\r\n    };\r\n    /**\r\n     * Get all values for the given parameter name, or `null` if it's not present.\r\n     */\r\n    /**\r\n     * Get all values for the given parameter name, or `null` if it's not present.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.getAll = /**\r\n     * Get all values for the given parameter name, or `null` if it's not present.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    function (param) {\r\n        this.init();\r\n        return /** @type {?} */ ((this.map)).get(param) || null;\r\n    };\r\n    /**\r\n     * Get all the parameter names for this body.\r\n     */\r\n    /**\r\n     * Get all the parameter names for this body.\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.keys = /**\r\n     * Get all the parameter names for this body.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.init();\r\n        return Array.from(/** @type {?} */ ((this.map)).keys());\r\n    };\r\n    /**\r\n     * Construct a new body with an appended value for the given parameter name.\r\n     */\r\n    /**\r\n     * Construct a new body with an appended value for the given parameter name.\r\n     * @param {?} param\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.append = /**\r\n     * Construct a new body with an appended value for the given parameter name.\r\n     * @param {?} param\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\r\n    /**\r\n     * Construct a new body with a new value for the given parameter name.\r\n     */\r\n    /**\r\n     * Construct a new body with a new value for the given parameter name.\r\n     * @param {?} param\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.set = /**\r\n     * Construct a new body with a new value for the given parameter name.\r\n     * @param {?} param\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\r\n    /**\r\n     * Construct a new body with either the given value for the given parameter\r\n     * removed, if a value is given, or all values for the given parameter removed\r\n     * if not.\r\n     */\r\n    /**\r\n     * Construct a new body with either the given value for the given parameter\r\n     * removed, if a value is given, or all values for the given parameter removed\r\n     * if not.\r\n     * @param {?} param\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.delete = /**\r\n     * Construct a new body with either the given value for the given parameter\r\n     * removed, if a value is given, or all values for the given parameter removed\r\n     * if not.\r\n     * @param {?} param\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\r\n    /**\r\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    /**\r\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.toString = /**\r\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this.init();\r\n        return this.keys()\r\n            .map(function (key) {\r\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\r\n            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');\r\n        })\r\n            .join('&');\r\n    };\r\n    /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.clone = /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    function (update) {\r\n        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat([update]);\r\n        return clone;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HttpParams.prototype.init = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(function (key) { return ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\r\n            ((this.updates)).forEach(function (update) {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];\r\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\r\n                        ((_this.map)).set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];\r\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\r\n                            if (idx !== -1) {\r\n                                base_1.splice(idx, 1);\r\n                            }\r\n                            if (base_1.length > 0) {\r\n                                /** @type {?} */ ((_this.map)).set(update.param, base_1);\r\n                            }\r\n                            else {\r\n                                /** @type {?} */ ((_this.map)).delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            /** @type {?} */ ((_this.map)).delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = null;\r\n        }\r\n    };\r\n    return HttpParams;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n * @param {?} method\r\n * @return {?}\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpRequest = /** @class */ (function () {\r\n    function HttpRequest(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        var /** @type {?} */ options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? /** @type {?} */ (third) : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = /** @type {?} */ (third);\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            var /** @type {?} */ params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                var /** @type {?} */ qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     * @return {?}\r\n     */\r\n    HttpRequest.prototype.serializeBody = /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return (/** @type {?} */ (this.body)).toString();\r\n    };\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     * @return {?}\r\n     */\r\n    HttpRequest.prototype.detectContentTypeHeader = /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            Array.isArray(this.body)) {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    };\r\n    /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    HttpRequest.prototype.clone = /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    function (update) {\r\n        if (update === void 0) { update = {}; }\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        var /** @type {?} */ method = update.method || this.method;\r\n        var /** @type {?} */ url = update.url || this.url;\r\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        var /** @type {?} */ headers = update.headers || this.headers;\r\n        var /** @type {?} */ params = update.params || this.params;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\r\n        });\r\n    };\r\n    return HttpRequest;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nvar HttpEventType = {\r\n    /**\r\n       * The request was sent out over the wire.\r\n       */\r\n    Sent: 0,\r\n    /**\r\n       * An upload progress event was received.\r\n       */\r\n    UploadProgress: 1,\r\n    /**\r\n       * The response status code and headers were received.\r\n       */\r\n    ResponseHeader: 2,\r\n    /**\r\n       * A download progress event was received.\r\n       */\r\n    DownloadProgress: 3,\r\n    /**\r\n       * The full response including the body was received.\r\n       */\r\n    Response: 4,\r\n    /**\r\n       * A custom event from an interceptor or a backend.\r\n       */\r\n    User: 5,\r\n};\r\nHttpEventType[HttpEventType.Sent] = \"Sent\";\r\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\r\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\r\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\r\nHttpEventType[HttpEventType.Response] = \"Response\";\r\nHttpEventType[HttpEventType.User] = \"User\";\r\n/**\r\n * Base interface for progress events.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A download progress event.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An upload progress event.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An event indicating that the request was sent to the server. Useful\r\n * when a request may be retried multiple times, to distinguish between\r\n * retries on the final event stream.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A user-defined event.\r\n *\r\n * Grouping all custom events under this type ensures they will be handled\r\n * and forwarded by all implementations of interceptors.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An error that represents a failed attempt to JSON.parse text coming back\r\n * from the server.\r\n *\r\n * It bundles the Error object with the actual response body that failed to parse.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar HttpResponseBase = /** @class */ (function () {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\r\n        if (defaultStatus === void 0) { defaultStatus = 200; }\r\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n    return HttpResponseBase;\r\n}());\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpHeaderResponse = /** @class */ (function (_super) {\r\n    __extends(HttpHeaderResponse, _super);\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    function HttpHeaderResponse(init) {\r\n        if (init === void 0) { init = {}; }\r\n        var _this = _super.call(this, init) || this;\r\n        _this.type = HttpEventType.ResponseHeader;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    HttpHeaderResponse.prototype.clone = /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    function (update) {\r\n        if (update === void 0) { update = {}; }\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    };\r\n    return HttpHeaderResponse;\r\n}(HttpResponseBase));\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpResponse = /** @class */ (function (_super) {\r\n    __extends(HttpResponse, _super);\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    function HttpResponse(init) {\r\n        if (init === void 0) { init = {}; }\r\n        var _this = _super.call(this, init) || this;\r\n        _this.type = HttpEventType.Response;\r\n        _this.body = init.body !== undefined ? init.body : null;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    HttpResponse.prototype.clone = /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    function (update) {\r\n        if (update === void 0) { update = {}; }\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    };\r\n    return HttpResponse;\r\n}(HttpResponseBase));\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpErrorResponse = /** @class */ (function (_super) {\r\n    __extends(HttpErrorResponse, _super);\r\n    function HttpErrorResponse(init) {\r\n        var _this = \r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        _super.call(this, init, 0, 'Unknown Error') || this;\r\n        _this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        _this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (_this.status >= 200 && _this.status < 300) {\r\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\r\n        }\r\n        else {\r\n            _this.message =\r\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\r\n        }\r\n        _this.error = init.error || null;\r\n        return _this;\r\n    }\r\n    return HttpErrorResponse;\r\n}(HttpResponseBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. Basically, this clones the object and adds the body.\r\n * @template T\r\n * @param {?} options\r\n * @param {?} body\r\n * @return {?}\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body: body,\r\n        headers: options.headers,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Perform HTTP requests.\r\n *\r\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies according to which\r\n * signature is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * \\@stable\r\n */\r\nvar HttpClient = /** @class */ (function () {\r\n    function HttpClient(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * This method can be called in one of two ways. Either an `HttpRequest`\r\n     * instance can be passed directly as the only parameter, or a method can be\r\n     * passed as the first parameter, a string URL as the second, and an\r\n     * options hash as the third.\r\n     *\r\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\r\n     * raw `HttpEvent` stream will be returned.\r\n     *\r\n     * If a request is instead built by providing a URL, the options object\r\n     * determines the return type of `request()`. In addition to configuring\r\n     * request parameters such as the outgoing headers and/or the body, the options\r\n     * hash specifies two key pieces of information about the request: the\r\n     * `responseType` and what to `observe`.\r\n     *\r\n     * The `responseType` value determines how a successful response body will be\r\n     * parsed. If `responseType` is the default `json`, a type interface for the\r\n     * resulting object may be passed as a type parameter to `request()`.\r\n     *\r\n     * The `observe` value determines the return type of `request()`, based on what\r\n     * the consumer is interested in observing. A value of `events` will return an\r\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\r\n     * including progress events by default. A value of `response` will return an\r\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\r\n     * depends on the `responseType` and any optionally provided type parameter.\r\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * This method can be called in one of two ways. Either an `HttpRequest`\r\n     * instance can be passed directly as the only parameter, or a method can be\r\n     * passed as the first parameter, a string URL as the second, and an\r\n     * options hash as the third.\r\n     *\r\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\r\n     * raw `HttpEvent` stream will be returned.\r\n     *\r\n     * If a request is instead built by providing a URL, the options object\r\n     * determines the return type of `request()`. In addition to configuring\r\n     * request parameters such as the outgoing headers and/or the body, the options\r\n     * hash specifies two key pieces of information about the request: the\r\n     * `responseType` and what to `observe`.\r\n     *\r\n     * The `responseType` value determines how a successful response body will be\r\n     * parsed. If `responseType` is the default `json`, a type interface for the\r\n     * resulting object may be passed as a type parameter to `request()`.\r\n     *\r\n     * The `observe` value determines the return type of `request()`, based on what\r\n     * the consumer is interested in observing. A value of `events` will return an\r\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\r\n     * including progress events by default. A value of `response` will return an\r\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\r\n     * depends on the `responseType` and any optionally provided type parameter.\r\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\r\n     * @param {?} first\r\n     * @param {?=} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.request = /**\r\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * This method can be called in one of two ways. Either an `HttpRequest`\r\n     * instance can be passed directly as the only parameter, or a method can be\r\n     * passed as the first parameter, a string URL as the second, and an\r\n     * options hash as the third.\r\n     *\r\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\r\n     * raw `HttpEvent` stream will be returned.\r\n     *\r\n     * If a request is instead built by providing a URL, the options object\r\n     * determines the return type of `request()`. In addition to configuring\r\n     * request parameters such as the outgoing headers and/or the body, the options\r\n     * hash specifies two key pieces of information about the request: the\r\n     * `responseType` and what to `observe`.\r\n     *\r\n     * The `responseType` value determines how a successful response body will be\r\n     * parsed. If `responseType` is the default `json`, a type interface for the\r\n     * resulting object may be passed as a type parameter to `request()`.\r\n     *\r\n     * The `observe` value determines the return type of `request()`, based on what\r\n     * the consumer is interested in observing. A value of `events` will return an\r\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\r\n     * including progress events by default. A value of `response` will return an\r\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\r\n     * depends on the `responseType` and any optionally provided type parameter.\r\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\r\n     * @param {?} first\r\n     * @param {?=} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (first, url, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        var /** @type {?} */ req;\r\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = /** @type {?} */ (first);\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming GET unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            var /** @type {?} */ headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            var /** @type {?} */ params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, /** @type {?} */ ((url)), (options.body !== undefined ? options.body : null), {\r\n                headers: headers,\r\n                params: params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        var /** @type {?} */ events$ = concatMap.call(of(req), function (req) { return _this.handler.handle(req); });\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        var /** @type {?} */ res$ = filter.call(events$, function (event) { return event instanceof HttpResponse; });\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return map.call(res$, function (res) {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        });\r\n                    case 'blob':\r\n                        return map.call(res$, function (res) {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        });\r\n                    case 'text':\r\n                        return map.call(res$, function (res) {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        });\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return map.call(res$, function (res) { return res.body; });\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\r\n        }\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * DELETE request to be executed on the server. See the individual overloads for\r\n     * details of `delete()`'s return type based on the provided options.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * DELETE request to be executed on the server. See the individual overloads for\r\n     * details of `delete()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.delete = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * DELETE request to be executed on the server. See the individual overloads for\r\n     * details of `delete()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (url, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.request('DELETE', url, /** @type {?} */ (options));\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * GET request to be executed on the server. See the individual overloads for\r\n     * details of `get()`'s return type based on the provided options.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * GET request to be executed on the server. See the individual overloads for\r\n     * details of `get()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.get = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * GET request to be executed on the server. See the individual overloads for\r\n     * details of `get()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (url, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.request('GET', url, /** @type {?} */ (options));\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * HEAD request to be executed on the server. See the individual overloads for\r\n     * details of `head()`'s return type based on the provided options.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * HEAD request to be executed on the server. See the individual overloads for\r\n     * details of `head()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.head = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * HEAD request to be executed on the server. See the individual overloads for\r\n     * details of `head()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (url, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.request('HEAD', url, /** @type {?} */ (options));\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause a request\r\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\r\n     *\r\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\r\n     * If no such interceptor is reached, then the `JSONP` request will likely be\r\n     * rejected by the configured backend.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause a request\r\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\r\n     *\r\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\r\n     * If no such interceptor is reached, then the `JSONP` request will likely be\r\n     * rejected by the configured backend.\r\n     * @template T\r\n     * @param {?} url\r\n     * @param {?} callbackParam\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.jsonp = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause a request\r\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\r\n     *\r\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\r\n     * If no such interceptor is reached, then the `JSONP` request will likely be\r\n     * rejected by the configured backend.\r\n     * @template T\r\n     * @param {?} url\r\n     * @param {?} callbackParam\r\n     * @return {?}\r\n     */\r\n    function (url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * OPTIONS request to be executed on the server. See the individual overloads for\r\n     * details of `options()`'s return type based on the provided options.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * OPTIONS request to be executed on the server. See the individual overloads for\r\n     * details of `options()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.options = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * OPTIONS request to be executed on the server. See the individual overloads for\r\n     * details of `options()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (url, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * PATCH request to be executed on the server. See the individual overloads for\r\n     * details of `patch()`'s return type based on the provided options.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * PATCH request to be executed on the server. See the individual overloads for\r\n     * details of `patch()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.patch = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * PATCH request to be executed on the server. See the individual overloads for\r\n     * details of `patch()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (url, body, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.post = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (url, body, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.request('POST', url, addBody(options, body));\r\n    };\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     */\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClient.prototype.put = /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (url, body, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.request('PUT', url, addBody(options, body));\r\n    };\r\n    HttpClient.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpClient.ctorParameters = function () { return [\r\n        { type: HttpHandler, },\r\n    ]; };\r\n    return HttpClient;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Intercepts `HttpRequest` and handles them.\r\n *\r\n * Most interceptors will transform the outgoing request before passing it to the\r\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\r\n *\r\n * In rare cases, interceptors may wish to completely handle a request themselves,\r\n * and not delegate to the remainder of the chain. This behavior is allowed.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpInterceptorHandler = /** @class */ (function () {\r\n    function HttpInterceptorHandler(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    HttpInterceptorHandler.prototype.handle = /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    function (req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    };\r\n    return HttpInterceptorHandler;\r\n}());\r\n/**\r\n * A multi-provider token which represents the array of `HttpInterceptor`s that\r\n * are registered.\r\n *\r\n * \\@stable\r\n */\r\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nvar NoopInterceptor = /** @class */ (function () {\r\n    function NoopInterceptor() {\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    NoopInterceptor.prototype.intercept = /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    function (req, next) {\r\n        return next.handle(req);\r\n    };\r\n    NoopInterceptor.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    NoopInterceptor.ctorParameters = function () { return []; };\r\n    return NoopInterceptor;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nvar nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar JsonpCallbackContext = /** @class */ (function () {\r\n    function JsonpCallbackContext() {\r\n    }\r\n    return JsonpCallbackContext;\r\n}());\r\n/**\r\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n *\r\n * \\@stable\r\n */\r\nvar JsonpClientBackend = /** @class */ (function () {\r\n    function JsonpClientBackend(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     * @return {?}\r\n     */\r\n    JsonpClientBackend.prototype.nextCallback = /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     * @return {?}\r\n     */\r\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\r\n    /**\r\n     * Process a JSONP request and return an event stream of the results.\r\n     */\r\n    /**\r\n     * Process a JSONP request and return an event stream of the results.\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    JsonpClientBackend.prototype.handle = /**\r\n     * Process a JSONP request and return an event stream of the results.\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    function (req) {\r\n        var _this = this;\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable(function (observer) {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            var /** @type {?} */ callback = _this.nextCallback();\r\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\r\n            // Construct the <script> tag and point it at the URL.\r\n            var /** @type {?} */ node = _this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            var /** @type {?} */ body = null;\r\n            // Whether the response callback has been called.\r\n            var /** @type {?} */ finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            var /** @type {?} */ cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            _this.callbackMap[callback] = function (data) {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete _this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            var /** @type {?} */ cleanup = function () {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete _this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            var /** @type {?} */ onLoad = function (event) {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Cleanup the page.\r\n                cleanup();\r\n                // Check whether the response callback has run.\r\n                if (!finished) {\r\n                    // It hasn't, something went wrong with the request. Return an error via\r\n                    // the Observable error path. All JSONP errors have status 0.\r\n                    observer.error(new HttpErrorResponse({\r\n                        url: url,\r\n                        status: 0,\r\n                        statusText: 'JSONP Error',\r\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                    }));\r\n                    return;\r\n                }\r\n                // Success. body either contains the response body or null if none was\r\n                // returned.\r\n                observer.next(new HttpResponse({\r\n                    body: body,\r\n                    status: 200,\r\n                    statusText: 'OK', url: url,\r\n                }));\r\n                // Complete the stream, the response is over.\r\n                observer.complete();\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            var /** @type {?} */ onError = function (error) {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error: error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error', url: url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            _this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return function () {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    };\r\n    JsonpClientBackend.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    JsonpClientBackend.ctorParameters = function () { return [\r\n        { type: JsonpCallbackContext, },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n    ]; };\r\n    return JsonpClientBackend;\r\n}());\r\n/**\r\n * An `HttpInterceptor` which identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * \\@stable\r\n */\r\nvar JsonpInterceptor = /** @class */ (function () {\r\n    function JsonpInterceptor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    JsonpInterceptor.prototype.intercept = /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    function (req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle(/** @type {?} */ (req));\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    };\r\n    JsonpInterceptor.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    JsonpInterceptor.ctorParameters = function () { return [\r\n        { type: JsonpClientBackend, },\r\n    ]; };\r\n    return JsonpInterceptor;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n * @param {?} xhr\r\n * @return {?}\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar XhrFactory = /** @class */ (function () {\r\n    function XhrFactory() {\r\n    }\r\n    return XhrFactory;\r\n}());\r\n/**\r\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\r\n *\r\n * \\@stable\r\n */\r\nvar BrowserXhr = /** @class */ (function () {\r\n    function BrowserXhr() {\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    BrowserXhr.prototype.build = /**\r\n     * @return {?}\r\n     */\r\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\r\n    BrowserXhr.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    BrowserXhr.ctorParameters = function () { return []; };\r\n    return BrowserXhr;\r\n}());\r\n/**\r\n * An `HttpBackend` which uses the XMLHttpRequest API to send\r\n * requests to a backend server.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpXhrBackend = /** @class */ (function () {\r\n    function HttpXhrBackend(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Process a request and return a stream of response events.\r\n     */\r\n    /**\r\n     * Process a request and return a stream of response events.\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    HttpXhrBackend.prototype.handle = /**\r\n     * Process a request and return a stream of response events.\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    function (req) {\r\n        var _this = this;\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the JsonpClientModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable(function (observer) {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                var /** @type {?} */ responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            var /** @type {?} */ reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            var /** @type {?} */ headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            var /** @type {?} */ partialFromXhr = function () {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\r\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\r\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            var /** @type {?} */ onLoad = function () {\r\n                // Read response state from the memoized partial data.\r\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\r\n                // The body will be read out if present.\r\n                var /** @type {?} */ body = null;\r\n                if (status !== 204) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                var /** @type {?} */ ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    var /** @type {?} */ originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (/** @type {?} */ error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = /** @type {?} */ ({ error: error, text: body });\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body: body,\r\n                        headers: headers,\r\n                        status: status,\r\n                        statusText: statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers: headers,\r\n                        status: status,\r\n                        statusText: statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            var /** @type {?} */ onError = function (error) {\r\n                var /** @type {?} */ res = new HttpErrorResponse({\r\n                    error: error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            var /** @type {?} */ sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            var /** @type {?} */ onDownProgress = function (event) {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                var /** @type {?} */ progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            var /** @type {?} */ onUpProgress = function (event) {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                var /** @type {?} */ progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return function () {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                xhr.abort();\r\n            };\r\n        });\r\n    };\r\n    HttpXhrBackend.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpXhrBackend.ctorParameters = function () { return [\r\n        { type: XhrFactory, },\r\n    ]; };\r\n    return HttpXhrBackend;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\r\n    function HttpXsrfTokenExtractor() {\r\n    }\r\n    return HttpXsrfTokenExtractor;\r\n}());\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\r\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * \\@internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    HttpXsrfCookieExtractor.prototype.getToken = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    };\r\n    HttpXsrfCookieExtractor.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },\r\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] },] },\r\n    ]; };\r\n    return HttpXsrfCookieExtractor;\r\n}());\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nvar HttpXsrfInterceptor = /** @class */ (function () {\r\n    function HttpXsrfInterceptor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    HttpXsrfInterceptor.prototype.intercept = /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    function (req, next) {\r\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        var /** @type {?} */ token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    };\r\n    HttpXsrfInterceptor.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpXsrfInterceptor.ctorParameters = function () { return [\r\n        { type: HttpXsrfTokenExtractor, },\r\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] },] },\r\n    ]; };\r\n    return HttpXsrfInterceptor;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An `HttpHandler` that applies a bunch of `HttpInterceptor`s\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n */\r\nvar HttpInterceptingHandler = /** @class */ (function () {\r\n    function HttpInterceptingHandler(backend, injector) {\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    HttpInterceptingHandler.prototype.handle = /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    function (req) {\r\n        if (this.chain === null) {\r\n            var /** @type {?} */ interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\r\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\r\n        }\r\n        return this.chain.handle(req);\r\n    };\r\n    HttpInterceptingHandler.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpInterceptingHandler.ctorParameters = function () { return [\r\n        { type: HttpBackend, },\r\n        { type: Injector, },\r\n    ]; };\r\n    return HttpInterceptingHandler;\r\n}());\r\n/**\r\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Meant to be used as a factory function within `HttpClientModule`.\r\n *\r\n * \\@stable\r\n * @param {?} backend\r\n * @param {?=} interceptors\r\n * @return {?}\r\n */\r\nfunction interceptingHandler(backend, interceptors) {\r\n    if (interceptors === void 0) { interceptors = []; }\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n * \\@stable\r\n * @return {?}\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * `NgModule` which adds XSRF protection support to outgoing requests.\r\n *\r\n * Provided the server supports a cookie-based XSRF protection system, this\r\n * module can be used directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\r\n * the header name and `XSRF-TOKEN` for the cookie name.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpClientXsrfModule = /** @class */ (function () {\r\n    function HttpClientXsrfModule() {\r\n    }\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     * @return {?}\r\n     */\r\n    HttpClientXsrfModule.disable = /**\r\n     * Disable the default XSRF protection.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    };\r\n    /**\r\n     * Configure XSRF protection to use the given cookie name or header name,\r\n     * or the default names (as described above) if not provided.\r\n     */\r\n    /**\r\n     * Configure XSRF protection to use the given cookie name or header name,\r\n     * or the default names (as described above) if not provided.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    HttpClientXsrfModule.withOptions = /**\r\n     * Configure XSRF protection to use the given cookie name or header name,\r\n     * or the default names (as described above) if not provided.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    };\r\n    HttpClientXsrfModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    providers: [\r\n                        HttpXsrfInterceptor,\r\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                    ],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\r\n    return HttpClientXsrfModule;\r\n}());\r\n/**\r\n * `NgModule` which provides the `HttpClient` and associated services.\r\n *\r\n * Interceptors can be added to the chain behind `HttpClient` by binding them\r\n * to the multiprovider for `HTTP_INTERCEPTORS`.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpClientModule = /** @class */ (function () {\r\n    function HttpClientModule() {\r\n    }\r\n    HttpClientModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        HttpClientXsrfModule.withOptions({\r\n                            cookieName: 'XSRF-TOKEN',\r\n                            headerName: 'X-XSRF-TOKEN',\r\n                        }),\r\n                    ],\r\n                    providers: [\r\n                        HttpClient,\r\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n                        HttpXhrBackend,\r\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                        BrowserXhr,\r\n                        { provide: XhrFactory, useExisting: BrowserXhr },\r\n                    ],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpClientModule.ctorParameters = function () { return []; };\r\n    return HttpClientModule;\r\n}());\r\n/**\r\n * `NgModule` which enables JSONP support in `HttpClient`.\r\n *\r\n * Without this module, Jsonp requests will reach the backend\r\n * with method JSONP, where they'll be rejected.\r\n *\r\n * \\@stable\r\n */\r\nvar HttpClientJsonpModule = /** @class */ (function () {\r\n    function HttpClientJsonpModule() {\r\n    }\r\n    HttpClientJsonpModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    providers: [\r\n                        JsonpClientBackend,\r\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                    ],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\r\n    return HttpClientJsonpModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, interceptingHandler as ɵinterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor, NoopInterceptor as ɵa, JsonpCallbackContext as ɵb, HttpInterceptingHandler as ɵc, jsonpCallbackContext as ɵd, BrowserXhr as ɵe, HttpXsrfCookieExtractor as ɵh, HttpXsrfInterceptor as ɵi, XSRF_COOKIE_NAME as ɵf, XSRF_HEADER_NAME as ɵg };\r\n//# sourceMappingURL=http.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/common/esm5/http.js\n// module id = 424\n// module chunks = 0","import { ViewChild, Component } from '@angular/core';\r\nimport { Slides, IonicPage, NavController, NavParams } from 'ionic-angular';\r\n\r\n@IonicPage( {} )\r\n@Component( { selector: 'page-product-details', templateUrl: 'product-details.html' } )\r\n\r\nexport class ProductDetailsPage\r\n{\r\n\r\n  @ViewChild( Slides ) slides: Slides;\r\n\r\n  public product: any;\r\n  private wooCommerce: any;\r\n  public reviews: any[] = [];\r\n  public details :any[] = [];\r\n\r\n  constructor(\r\n    public navCtrl: NavController,\r\n    public navParams: NavParams)\r\n  {\r\n\r\n    this.product = {\r\n      name:'Nike Air',\r\n      images: ['../../assets/imgs/s1.jpg', 'assets/imgs/s2.jpg','assets/imgs/s3.jpg'],\r\n      categories: ['Shoes','Air','Nike'],\r\n      price: 200\r\n    }\r\n\r\n    this.reviews = [{ \r\n      reviewer_name: 'Hassan Ali',\r\n      review: `'So comfortable and durable. Definitely get them if you need comfy shoes, I don't run in them, I use them for fashion and I can say they go with everything.'`\r\n \r\n \r\n    }]\r\n\r\n    this.details =[{\r\n    title:'Product details',\r\n    p_det:'-Color Blue -Size 7 -Nike Sole -Soft Rubber -Blue Laces '\r\n    }]\r\n  }\r\n\r\n  //Slider options\r\n  ngAfterViewInit ()\r\n  {\r\n    this.slides.autoHeight = true;\r\n    this.slides.pager = true;\r\n    this.slides.autoplay = 3000;\r\n    this.slides.loop = true;\r\n\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/product-details/product-details.ts","export * from './image-loader.module';\r\nexport * from './components/img-loader';\r\nexport * from './providers/image-loader-config';\r\nexport * from './providers/image-loader';\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ionic-image-loader/dist/index.js\n// module id = 434\n// module chunks = 0","import { NgModule } from '@angular/core';\r\nimport { ImgLoader } from './components/img-loader';\r\nimport { ImageLoader } from './providers/image-loader';\r\nimport { ImageLoaderConfig } from './providers/image-loader-config';\r\nimport { IonicModule } from 'ionic-angular';\r\nimport { File } from '@ionic-native/file';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nvar IonicImageLoader = (function () {\r\n    function IonicImageLoader() {\r\n    }\r\n    IonicImageLoader.forRoot = function () {\r\n        return {\r\n            ngModule: IonicImageLoader,\r\n            providers: [\r\n                ImageLoaderConfig,\r\n                ImageLoader,\r\n                File,\r\n            ]\r\n        };\r\n    };\r\n    return IonicImageLoader;\r\n}());\r\nexport { IonicImageLoader };\r\nIonicImageLoader.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [\r\n                    ImgLoader\r\n                ],\r\n                imports: [\r\n                    IonicModule,\r\n                    HttpClientModule,\r\n                ],\r\n                exports: [\r\n                    ImgLoader\r\n                ]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nIonicImageLoader.ctorParameters = function () { return []; };\r\n//# sourceMappingURL=image-loader.module.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ionic-image-loader/dist/image-loader.module.js\n// module id = 435\n// module chunks = 0","\"use strict\";\r\nvar concatMap_1 = require('../operators/concatMap');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, in a serialized fashion waiting for each one to complete before\r\n * merging the next.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link concatAll}.</span>\r\n *\r\n * <img src=\"./img/concatMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\r\n * concatenated with the previous inner Observable.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and taking values from each projected inner\r\n * Observable sequentially.\r\n * @method concatMap\r\n * @owner Observable\r\n */\r\nfunction concatMap(project, resultSelector) {\r\n    return concatMap_1.concatMap(project, resultSelector)(this);\r\n}\r\nexports.concatMap = concatMap;\r\n//# sourceMappingURL=concatMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operator/concatMap.js\n// module id = 436\n// module chunks = 0","\"use strict\";\r\nvar filter_1 = require('../operators/filter');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Filter items emitted by the source Observable by only emitting those that\r\n * satisfy a specified predicate.\r\n *\r\n * <span class=\"informal\">Like\r\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\r\n * it only emits a value from the source if it passes a criterion function.</span>\r\n *\r\n * <img src=\"./img/filter.png\" width=\"100%\">\r\n *\r\n * Similar to the well-known `Array.prototype.filter` method, this operator\r\n * takes values from the source Observable, passes them through a `predicate`\r\n * function and only emits those values that yielded `true`.\r\n *\r\n * @example <caption>Emit only click events whose target was a DIV element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\r\n * clicksOnDivs.subscribe(x => console.log(x));\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n * @see {@link distinctUntilKeyChanged}\r\n * @see {@link ignoreElements}\r\n * @see {@link partition}\r\n * @see {@link skip}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted, if `false` the value is not passed to the output\r\n * Observable. The `index` parameter is the number `i` for the i-th source\r\n * emission that has happened since the subscription, starting from the number\r\n * `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of values from the source that were\r\n * allowed by the `predicate` function.\r\n * @method filter\r\n * @owner Observable\r\n */\r\nfunction filter(predicate, thisArg) {\r\n    return filter_1.filter(predicate, thisArg)(this);\r\n}\r\nexports.filter = filter;\r\n//# sourceMappingURL=filter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operator/filter.js\n// module id = 437\n// module chunks = 0","\"use strict\";\r\nvar Observable_1 = require('../../Observable');\r\nvar first_1 = require('../../operator/first');\r\nObservable_1.Observable.prototype.first = first_1.first;\r\n//# sourceMappingURL=first.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/first.js\n// module id = 438\n// module chunks = 0","\"use strict\";\r\nvar first_1 = require('../operators/first');\r\n/**\r\n * Emits only the first value (or the first value that meets some condition)\r\n * emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the first value. Or emits only the first\r\n * value that passes some test.</span>\r\n *\r\n * <img src=\"./img/first.png\" width=\"100%\">\r\n *\r\n * If called with no arguments, `first` emits the first value of the source\r\n * Observable, then completes. If called with a `predicate` function, `first`\r\n * emits the first value of the source that matches the specified condition. It\r\n * may also take a `resultSelector` function to produce the output value from\r\n * the input value, and a `defaultValue` to emit in case the source completes\r\n * before it is able to emit a valid value. Throws an error if `defaultValue`\r\n * was not provided and a matching element is not found.\r\n *\r\n * @example <caption>Emit only the first click that happens on the DOM</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Emits the first click that happens on a DIV</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link take}\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\r\n * An optional function called with each item to test for condition matching.\r\n * @param {function(value: T, index: number): R} [resultSelector] A function to\r\n * produce the value on the output Observable based on the values\r\n * and the indices of the source Observable. The arguments passed to this\r\n * function are:\r\n * - `value`: the value that was emitted on the source.\r\n * - `index`: the \"index\" of the value from the source.\r\n * @param {R} [defaultValue] The default value emitted in case no valid value\r\n * was found on the source.\r\n * @return {Observable<T|R>} An Observable of the first item that matches the\r\n * condition.\r\n * @method first\r\n * @owner Observable\r\n */\r\nfunction first(predicate, resultSelector, defaultValue) {\r\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\r\n}\r\nexports.first = first;\r\n//# sourceMappingURL=first.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operator/first.js\n// module id = 439\n// module chunks = 0"],"sourceRoot":""}